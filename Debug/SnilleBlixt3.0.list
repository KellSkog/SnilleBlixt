
SnilleBlixt3.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002730  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080028d0  080028d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800292c  0800292c  0001292c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002934  08002934  00012934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002938  08002938  00012938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800293c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003e48  20000010  0800294c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003e58  0800294c  00023e58  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000176e7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ffe  00000000  00000000  00037727  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000082a2  00000000  00000000  0003a725  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000bf0  00000000  00000000  000429c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f10  00000000  00000000  000435b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006116  00000000  00000000  000444c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004dbd  00000000  00000000  0004a5de  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004f39b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002270  00000000  00000000  0004f418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080028b8 	.word	0x080028b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080028b8 	.word	0x080028b8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f2:	4a0e      	ldr	r2, [pc, #56]	; (800052c <HAL_InitTick+0x3c>)
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_InitTick+0x40>)
{
 80004f6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f8:	7818      	ldrb	r0, [r3, #0]
 80004fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000502:	6810      	ldr	r0, [r2, #0]
 8000504:	fbb0 f0f3 	udiv	r0, r0, r3
 8000508:	f000 fa76 	bl	80009f8 <HAL_SYSTICK_Config>
 800050c:	4604      	mov	r4, r0
 800050e:	b958      	cbnz	r0, 8000528 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000510:	2d0f      	cmp	r5, #15
 8000512:	d809      	bhi.n	8000528 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000514:	4602      	mov	r2, r0
 8000516:	4629      	mov	r1, r5
 8000518:	f04f 30ff 	mov.w	r0, #4294967295
 800051c:	f000 fa38 	bl	8000990 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <HAL_InitTick+0x44>)
 8000522:	4620      	mov	r0, r4
 8000524:	601d      	str	r5, [r3, #0]
 8000526:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000528:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800052a:	bd38      	pop	{r3, r4, r5, pc}
 800052c:	2000000c 	.word	0x2000000c
 8000530:	20000000 	.word	0x20000000
 8000534:	20000004 	.word	0x20000004

08000538 <HAL_Init>:
{
 8000538:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <HAL_Init+0x30>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800054a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000552:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000554:	2003      	movs	r0, #3
 8000556:	f000 fa09 	bl	800096c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800055a:	200f      	movs	r0, #15
 800055c:	f7ff ffc8 	bl	80004f0 <HAL_InitTick>
  HAL_MspInit();
 8000560:	f002 f85a 	bl	8002618 <HAL_MspInit>
}
 8000564:	2000      	movs	r0, #0
 8000566:	bd08      	pop	{r3, pc}
 8000568:	40023c00 	.word	0x40023c00

0800056c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <HAL_IncTick+0x10>)
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <HAL_IncTick+0x14>)
 8000570:	6811      	ldr	r1, [r2, #0]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	440b      	add	r3, r1
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20003d78 	.word	0x20003d78
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000584:	4b01      	ldr	r3, [pc, #4]	; (800058c <HAL_GetTick+0x8>)
 8000586:	6818      	ldr	r0, [r3, #0]
}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20003d78 	.word	0x20003d78

08000590 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000590:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000592:	4604      	mov	r4, r0
 8000594:	2800      	cmp	r0, #0
 8000596:	f000 8099 	beq.w	80006cc <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800059a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800059c:	b923      	cbnz	r3, 80005a8 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800059e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005a4:	f002 f85a 	bl	800265c <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005aa:	06db      	lsls	r3, r3, #27
 80005ac:	f100 808c 	bmi.w	80006c8 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005b6:	f023 0302 	bic.w	r3, r3, #2
 80005ba:	f043 0302 	orr.w	r3, r3, #2
 80005be:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005c0:	4b43      	ldr	r3, [pc, #268]	; (80006d0 <HAL_ADC_Init+0x140>)
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005c8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	6861      	ldr	r1, [r4, #4]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005d2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005d4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005e6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005e8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005ea:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005ee:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	430a      	orrs	r2, r1
 80005f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005f6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005f8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	430a      	orrs	r2, r1
 8000604:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000606:	4933      	ldr	r1, [pc, #204]	; (80006d4 <HAL_ADC_Init+0x144>)
 8000608:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800060a:	428a      	cmp	r2, r1
 800060c:	d050      	beq.n	80006b0 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800060e:	6899      	ldr	r1, [r3, #8]
 8000610:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000614:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000616:	6899      	ldr	r1, [r3, #8]
 8000618:	430a      	orrs	r2, r1
 800061a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800061c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800061e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000620:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000626:	689a      	ldr	r2, [r3, #8]
 8000628:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800062a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800062c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800062e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000630:	f022 0202 	bic.w	r2, r2, #2
 8000634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000636:	689a      	ldr	r2, [r3, #8]
 8000638:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800063c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800063e:	6a22      	ldr	r2, [r4, #32]
 8000640:	2a00      	cmp	r2, #0
 8000642:	d03d      	beq.n	80006c0 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000644:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000646:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800064c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800064e:	685a      	ldr	r2, [r3, #4]
 8000650:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000654:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000656:	685a      	ldr	r2, [r3, #4]
 8000658:	3901      	subs	r1, #1
 800065a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800065e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000662:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000664:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800066a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800066c:	3901      	subs	r1, #1
 800066e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000672:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000674:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000676:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000678:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800067c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800067e:	689a      	ldr	r2, [r3, #8]
 8000680:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000684:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000686:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000688:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800068a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800068e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000690:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000692:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000694:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000698:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800069a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800069c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800069e:	f023 0303 	bic.w	r3, r3, #3
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006a8:	2300      	movs	r3, #0
 80006aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006ae:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006be:	e7b4      	b.n	800062a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006c6:	e7ca      	b.n	800065e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 80006c8:	2001      	movs	r0, #1
 80006ca:	e7ed      	b.n	80006a8 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 80006cc:	2001      	movs	r0, #1
}
 80006ce:	bd10      	pop	{r4, pc}
 80006d0:	40012300 	.word	0x40012300
 80006d4:	0f000001 	.word	0x0f000001

080006d8 <HAL_ADC_Start>:
{
 80006d8:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80006da:	2300      	movs	r3, #0
 80006dc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d04e      	beq.n	8000784 <HAL_ADC_Start+0xac>
 80006e6:	2301      	movs	r3, #1
 80006e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006ec:	6803      	ldr	r3, [r0, #0]
 80006ee:	689a      	ldr	r2, [r3, #8]
 80006f0:	07d1      	lsls	r1, r2, #31
 80006f2:	d505      	bpl.n	8000700 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	07d2      	lsls	r2, r2, #31
 80006f8:	d414      	bmi.n	8000724 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 80006fa:	2000      	movs	r0, #0
}
 80006fc:	b002      	add	sp, #8
 80006fe:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000700:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000702:	4921      	ldr	r1, [pc, #132]	; (8000788 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8000704:	f042 0201 	orr.w	r2, r2, #1
 8000708:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <HAL_ADC_Start+0xb4>)
 800070c:	6812      	ldr	r2, [r2, #0]
 800070e:	fbb2 f2f1 	udiv	r2, r2, r1
 8000712:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000716:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000718:	9a01      	ldr	r2, [sp, #4]
 800071a:	2a00      	cmp	r2, #0
 800071c:	d0ea      	beq.n	80006f4 <HAL_ADC_Start+0x1c>
      counter--;
 800071e:	9a01      	ldr	r2, [sp, #4]
 8000720:	3a01      	subs	r2, #1
 8000722:	e7f8      	b.n	8000716 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000724:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000726:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000732:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000738:	bf41      	itttt	mi
 800073a:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 800073c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000740:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000744:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000746:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800074c:	bf1c      	itt	ne
 800074e:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000750:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000754:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000756:	2200      	movs	r2, #0
 8000758:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800075c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000760:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <HAL_ADC_Start+0xb8>)
 8000764:	6852      	ldr	r2, [r2, #4]
 8000766:	06d2      	lsls	r2, r2, #27
 8000768:	d108      	bne.n	800077c <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800076a:	6898      	ldr	r0, [r3, #8]
 800076c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000770:	d1c3      	bne.n	80006fa <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	e7bf      	b.n	80006fc <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800077c:	4a05      	ldr	r2, [pc, #20]	; (8000794 <HAL_ADC_Start+0xbc>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d1bb      	bne.n	80006fa <HAL_ADC_Start+0x22>
 8000782:	e7f2      	b.n	800076a <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000784:	2002      	movs	r0, #2
 8000786:	e7b9      	b.n	80006fc <HAL_ADC_Start+0x24>
 8000788:	000f4240 	.word	0x000f4240
 800078c:	2000000c 	.word	0x2000000c
 8000790:	40012300 	.word	0x40012300
 8000794:	40012000 	.word	0x40012000

08000798 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000798:	6803      	ldr	r3, [r0, #0]
 800079a:	689a      	ldr	r2, [r3, #8]
{
 800079c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800079e:	0556      	lsls	r6, r2, #21
{
 80007a0:	4604      	mov	r4, r0
 80007a2:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007a4:	d50b      	bpl.n	80007be <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80007a6:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007a8:	05d8      	lsls	r0, r3, #23
 80007aa:	d508      	bpl.n	80007be <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ae:	f043 0320 	orr.w	r3, r3, #32
 80007b2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80007b4:	2300      	movs	r3, #0
 80007b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80007ba:	2001      	movs	r0, #1
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80007be:	f7ff fee1 	bl	8000584 <HAL_GetTick>
 80007c2:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	0792      	lsls	r2, r2, #30
 80007ca:	d50c      	bpl.n	80007e6 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80007cc:	f06f 0212 	mvn.w	r2, #18
 80007d0:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80007d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007d8:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80007da:	689a      	ldr	r2, [r3, #8]
 80007dc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80007e0:	d013      	beq.n	800080a <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 80007e2:	2000      	movs	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80007e6:	1c69      	adds	r1, r5, #1
 80007e8:	d0ed      	beq.n	80007c6 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80007ea:	b945      	cbnz	r5, 80007fe <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80007ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 80007f4:	2300      	movs	r3, #0
 80007f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80007fa:	2003      	movs	r0, #3
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80007fe:	f7ff fec1 	bl	8000584 <HAL_GetTick>
 8000802:	1b80      	subs	r0, r0, r6
 8000804:	4285      	cmp	r5, r0
 8000806:	d2dd      	bcs.n	80007c4 <HAL_ADC_PollForConversion+0x2c>
 8000808:	e7f0      	b.n	80007ec <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800080a:	69a2      	ldr	r2, [r4, #24]
 800080c:	2a00      	cmp	r2, #0
 800080e:	d1e8      	bne.n	80007e2 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000812:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000816:	d002      	beq.n	800081e <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000818:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800081a:	055b      	lsls	r3, r3, #21
 800081c:	d4e1      	bmi.n	80007e2 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800081e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000824:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000826:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000828:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800082c:	d1d9      	bne.n	80007e2 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800082e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6423      	str	r3, [r4, #64]	; 0x40
}
 8000836:	bd70      	pop	{r4, r5, r6, pc}

08000838 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000838:	6803      	ldr	r3, [r0, #0]
 800083a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800083c:	4770      	bx	lr
	...

08000840 <HAL_ADC_ConfigChannel>:
{
 8000840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000842:	2300      	movs	r3, #0
 8000844:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000846:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800084a:	2b01      	cmp	r3, #1
 800084c:	f000 8083 	beq.w	8000956 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000850:	680d      	ldr	r5, [r1, #0]
 8000852:	6804      	ldr	r4, [r0, #0]
 8000854:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000856:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000858:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800085a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800085e:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000860:	d92a      	bls.n	80008b8 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000862:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000866:	68e7      	ldr	r7, [r4, #12]
 8000868:	3b1e      	subs	r3, #30
 800086a:	f04f 0e07 	mov.w	lr, #7
 800086e:	fa0e fe03 	lsl.w	lr, lr, r3
 8000872:	ea27 070e 	bic.w	r7, r7, lr
 8000876:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000878:	68e7      	ldr	r7, [r4, #12]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	433b      	orrs	r3, r7
 8000880:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000882:	684a      	ldr	r2, [r1, #4]
 8000884:	2a06      	cmp	r2, #6
 8000886:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800088a:	d825      	bhi.n	80008d8 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800088c:	4413      	add	r3, r2
 800088e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000890:	1f59      	subs	r1, r3, #5
 8000892:	231f      	movs	r3, #31
 8000894:	408b      	lsls	r3, r1
 8000896:	ea27 0303 	bic.w	r3, r7, r3
 800089a:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800089c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800089e:	fa06 f101 	lsl.w	r1, r6, r1
 80008a2:	4311      	orrs	r1, r2
 80008a4:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <HAL_ADC_ConfigChannel+0x11c>)
 80008a8:	429c      	cmp	r4, r3
 80008aa:	d034      	beq.n	8000916 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80008ac:	2300      	movs	r3, #0
 80008ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80008b2:	4618      	mov	r0, r3
}
 80008b4:	b003      	add	sp, #12
 80008b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008b8:	6927      	ldr	r7, [r4, #16]
 80008ba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80008be:	f04f 0e07 	mov.w	lr, #7
 80008c2:	fa0e fe03 	lsl.w	lr, lr, r3
 80008c6:	ea27 070e 	bic.w	r7, r7, lr
 80008ca:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80008cc:	6927      	ldr	r7, [r4, #16]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	433b      	orrs	r3, r7
 80008d4:	6123      	str	r3, [r4, #16]
 80008d6:	e7d4      	b.n	8000882 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80008d8:	2a0c      	cmp	r2, #12
 80008da:	d80e      	bhi.n	80008fa <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80008dc:	4413      	add	r3, r2
 80008de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80008e0:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80008e4:	231f      	movs	r3, #31
 80008e6:	4093      	lsls	r3, r2
 80008e8:	ea21 0303 	bic.w	r3, r1, r3
 80008ec:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80008ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008f0:	fa06 f202 	lsl.w	r2, r6, r2
 80008f4:	431a      	orrs	r2, r3
 80008f6:	6322      	str	r2, [r4, #48]	; 0x30
 80008f8:	e7d5      	b.n	80008a6 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80008fa:	4413      	add	r3, r2
 80008fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80008fe:	3b41      	subs	r3, #65	; 0x41
 8000900:	221f      	movs	r2, #31
 8000902:	409a      	lsls	r2, r3
 8000904:	ea21 0202 	bic.w	r2, r1, r2
 8000908:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800090a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800090c:	fa06 f103 	lsl.w	r1, r6, r3
 8000910:	4311      	orrs	r1, r2
 8000912:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000914:	e7c7      	b.n	80008a6 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000916:	2d12      	cmp	r5, #18
 8000918:	d104      	bne.n	8000924 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <HAL_ADC_ConfigChannel+0x120>)
 800091c:	6853      	ldr	r3, [r2, #4]
 800091e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000922:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000924:	f1a5 0310 	sub.w	r3, r5, #16
 8000928:	2b01      	cmp	r3, #1
 800092a:	d8bf      	bhi.n	80008ac <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800092c:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <HAL_ADC_ConfigChannel+0x120>)
 800092e:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000930:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000932:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000936:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000938:	d1b8      	bne.n	80008ac <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_ADC_ConfigChannel+0x124>)
 800093c:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_ADC_ConfigChannel+0x128>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	fbb3 f2f2 	udiv	r2, r3, r2
 8000944:	230a      	movs	r3, #10
 8000946:	4353      	muls	r3, r2
        counter--;
 8000948:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800094a:	9b01      	ldr	r3, [sp, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0ad      	beq.n	80008ac <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8000950:	9b01      	ldr	r3, [sp, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	e7f8      	b.n	8000948 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8000956:	2002      	movs	r0, #2
 8000958:	e7ac      	b.n	80008b4 <HAL_ADC_ConfigChannel+0x74>
 800095a:	bf00      	nop
 800095c:	40012000 	.word	0x40012000
 8000960:	40012300 	.word	0x40012300
 8000964:	2000000c 	.word	0x2000000c
 8000968:	000f4240 	.word	0x000f4240

0800096c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800096e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000970:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000974:	041b      	lsls	r3, r3, #16
 8000976:	0c1b      	lsrs	r3, r3, #16
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800097c:	0200      	lsls	r0, r0, #8
 800097e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000982:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000986:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000988:	60d3      	str	r3, [r2, #12]
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000992:	b530      	push	{r4, r5, lr}
 8000994:	68dc      	ldr	r4, [r3, #12]
 8000996:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	2b04      	cmp	r3, #4
 80009a2:	bf28      	it	cs
 80009a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	f04f 0501 	mov.w	r5, #1
 80009ac:	fa05 f303 	lsl.w	r3, r5, r3
 80009b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b4:	bf8c      	ite	hi
 80009b6:	3c03      	subhi	r4, #3
 80009b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ba:	4019      	ands	r1, r3
 80009bc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009be:	fa05 f404 	lsl.w	r4, r5, r4
 80009c2:	3c01      	subs	r4, #1
 80009c4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80009c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	ea42 0201 	orr.w	r2, r2, r1
 80009cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	bfaf      	iteee	ge
 80009d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	f000 000f 	andlt.w	r0, r0, #15
 80009da:	4b06      	ldrlt	r3, [pc, #24]	; (80009f4 <HAL_NVIC_SetPriority+0x64>)
 80009dc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	bfa5      	ittet	ge
 80009e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80009e4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80009ec:	bd30      	pop	{r4, r5, pc}
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00
 80009f4:	e000ed14 	.word	0xe000ed14

080009f8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f8:	3801      	subs	r0, #1
 80009fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009fe:	d20a      	bcs.n	8000a16 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a04:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a06:	21f0      	movs	r1, #240	; 0xf0
 8000a08:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a10:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a16:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e010 	.word	0xe000e010
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a28:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8000bcc <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a30:	4a64      	ldr	r2, [pc, #400]	; (8000bc4 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a32:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000a34:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a38:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a3a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000a3c:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a40:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000a44:	42b7      	cmp	r7, r6
 8000a46:	f040 80ad 	bne.w	8000ba4 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a4a:	684c      	ldr	r4, [r1, #4]
 8000a4c:	f024 0a10 	bic.w	sl, r4, #16
 8000a50:	f1ba 0f02 	cmp.w	sl, #2
 8000a54:	d116      	bne.n	8000a84 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000a56:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000a5a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a5e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a62:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a66:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a6a:	f04f 0e0f 	mov.w	lr, #15
 8000a6e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000a72:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a76:	690d      	ldr	r5, [r1, #16]
 8000a78:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a7c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000a80:	f8cc 5020 	str.w	r5, [ip, #32]
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a88:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000a8a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a8e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a92:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a94:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a98:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a9c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa0:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000aa4:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa8:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000aac:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8000aae:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ab2:	d815      	bhi.n	8000ae0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8000ab4:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ab8:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000abc:	68cd      	ldr	r5, [r1, #12]
 8000abe:	fa05 fa0c 	lsl.w	sl, r5, ip
 8000ac2:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8000ac6:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000aca:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ace:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ad2:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000ad6:	fa0e fe03 	lsl.w	lr, lr, r3
 8000ada:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000ade:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ae0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ae2:	9d00      	ldr	r5, [sp, #0]
 8000ae4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ae6:	688f      	ldr	r7, [r1, #8]
 8000ae8:	fa07 f70c 	lsl.w	r7, r7, ip
 8000aec:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000aee:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000af0:	00e5      	lsls	r5, r4, #3
 8000af2:	d557      	bpl.n	8000ba4 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af4:	f04f 0b00 	mov.w	fp, #0
 8000af8:	f8cd b00c 	str.w	fp, [sp, #12]
 8000afc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b00:	4d31      	ldr	r5, [pc, #196]	; (8000bc8 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b06:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b0a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b0e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b12:	9703      	str	r7, [sp, #12]
 8000b14:	9f03      	ldr	r7, [sp, #12]
 8000b16:	f023 0703 	bic.w	r7, r3, #3
 8000b1a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b1e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b22:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000b26:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b2a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b2e:	f04f 0e0f 	mov.w	lr, #15
 8000b32:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b36:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b38:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b3c:	d039      	beq.n	8000bb2 <HAL_GPIO_Init+0x18e>
 8000b3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b42:	42a8      	cmp	r0, r5
 8000b44:	d037      	beq.n	8000bb6 <HAL_GPIO_Init+0x192>
 8000b46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b4a:	42a8      	cmp	r0, r5
 8000b4c:	d035      	beq.n	8000bba <HAL_GPIO_Init+0x196>
 8000b4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b52:	42a8      	cmp	r0, r5
 8000b54:	d033      	beq.n	8000bbe <HAL_GPIO_Init+0x19a>
 8000b56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b5a:	42a8      	cmp	r0, r5
 8000b5c:	bf14      	ite	ne
 8000b5e:	2507      	movne	r5, #7
 8000b60:	2504      	moveq	r5, #4
 8000b62:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b66:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b6a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000b6c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b6e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b70:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b74:	bf0c      	ite	eq
 8000b76:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b78:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000b7a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000b7c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b7e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b82:	bf0c      	ite	eq
 8000b84:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b86:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000b88:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b8a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b8c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b90:	bf0c      	ite	eq
 8000b92:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b94:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000b96:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000b98:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b9a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b9c:	bf54      	ite	pl
 8000b9e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000ba0:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000ba2:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	2b10      	cmp	r3, #16
 8000ba8:	f47f af47 	bne.w	8000a3a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000bac:	b005      	add	sp, #20
 8000bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bb2:	465d      	mov	r5, fp
 8000bb4:	e7d5      	b.n	8000b62 <HAL_GPIO_Init+0x13e>
 8000bb6:	2501      	movs	r5, #1
 8000bb8:	e7d3      	b.n	8000b62 <HAL_GPIO_Init+0x13e>
 8000bba:	2502      	movs	r5, #2
 8000bbc:	e7d1      	b.n	8000b62 <HAL_GPIO_Init+0x13e>
 8000bbe:	2503      	movs	r5, #3
 8000bc0:	e7cf      	b.n	8000b62 <HAL_GPIO_Init+0x13e>
 8000bc2:	bf00      	nop
 8000bc4:	40013c00 	.word	0x40013c00
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bd0:	6903      	ldr	r3, [r0, #16]
 8000bd2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000bd4:	bf14      	ite	ne
 8000bd6:	2001      	movne	r0, #1
 8000bd8:	2000      	moveq	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bdc:	b10a      	cbz	r2, 8000be2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bde:	6181      	str	r1, [r0, #24]
 8000be0:	4770      	bx	lr
 8000be2:	0409      	lsls	r1, r1, #16
 8000be4:	e7fb      	b.n	8000bde <HAL_GPIO_WritePin+0x2>
	...

08000be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bec:	4604      	mov	r4, r0
 8000bee:	b918      	cbnz	r0, 8000bf8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000bf0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000bf2:	b002      	add	sp, #8
 8000bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf8:	6803      	ldr	r3, [r0, #0]
 8000bfa:	07dd      	lsls	r5, r3, #31
 8000bfc:	d410      	bmi.n	8000c20 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	0798      	lsls	r0, r3, #30
 8000c02:	d458      	bmi.n	8000cb6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	071a      	lsls	r2, r3, #28
 8000c08:	f100 809a 	bmi.w	8000d40 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	075b      	lsls	r3, r3, #29
 8000c10:	f100 80b8 	bmi.w	8000d84 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c14:	69a2      	ldr	r2, [r4, #24]
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	f040 8119 	bne.w	8000e4e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	e7e8      	b.n	8000bf2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c20:	4ba6      	ldr	r3, [pc, #664]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	f002 020c 	and.w	r2, r2, #12
 8000c28:	2a04      	cmp	r2, #4
 8000c2a:	d007      	beq.n	8000c3c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c32:	2a08      	cmp	r2, #8
 8000c34:	d10a      	bne.n	8000c4c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	0259      	lsls	r1, r3, #9
 8000c3a:	d507      	bpl.n	8000c4c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c3c:	4b9f      	ldr	r3, [pc, #636]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	039a      	lsls	r2, r3, #14
 8000c42:	d5dc      	bpl.n	8000bfe <HAL_RCC_OscConfig+0x16>
 8000c44:	6863      	ldr	r3, [r4, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1d9      	bne.n	8000bfe <HAL_RCC_OscConfig+0x16>
 8000c4a:	e7d1      	b.n	8000bf0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c4c:	6863      	ldr	r3, [r4, #4]
 8000c4e:	4d9b      	ldr	r5, [pc, #620]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
 8000c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c54:	d111      	bne.n	8000c7a <HAL_RCC_OscConfig+0x92>
 8000c56:	682b      	ldr	r3, [r5, #0]
 8000c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c5e:	f7ff fc91 	bl	8000584 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c62:	4d96      	ldr	r5, [pc, #600]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000c64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c66:	682b      	ldr	r3, [r5, #0]
 8000c68:	039b      	lsls	r3, r3, #14
 8000c6a:	d4c8      	bmi.n	8000bfe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c6c:	f7ff fc8a 	bl	8000584 <HAL_GetTick>
 8000c70:	1b80      	subs	r0, r0, r6
 8000c72:	2864      	cmp	r0, #100	; 0x64
 8000c74:	d9f7      	bls.n	8000c66 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000c76:	2003      	movs	r0, #3
 8000c78:	e7bb      	b.n	8000bf2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c7e:	d104      	bne.n	8000c8a <HAL_RCC_OscConfig+0xa2>
 8000c80:	682b      	ldr	r3, [r5, #0]
 8000c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c86:	602b      	str	r3, [r5, #0]
 8000c88:	e7e5      	b.n	8000c56 <HAL_RCC_OscConfig+0x6e>
 8000c8a:	682a      	ldr	r2, [r5, #0]
 8000c8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c90:	602a      	str	r2, [r5, #0]
 8000c92:	682a      	ldr	r2, [r5, #0]
 8000c94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c98:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1df      	bne.n	8000c5e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000c9e:	f7ff fc71 	bl	8000584 <HAL_GetTick>
 8000ca2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	039f      	lsls	r7, r3, #14
 8000ca8:	d5a9      	bpl.n	8000bfe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000caa:	f7ff fc6b 	bl	8000584 <HAL_GetTick>
 8000cae:	1b80      	subs	r0, r0, r6
 8000cb0:	2864      	cmp	r0, #100	; 0x64
 8000cb2:	d9f7      	bls.n	8000ca4 <HAL_RCC_OscConfig+0xbc>
 8000cb4:	e7df      	b.n	8000c76 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cb6:	4b81      	ldr	r3, [pc, #516]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	f012 0f0c 	tst.w	r2, #12
 8000cbe:	d007      	beq.n	8000cd0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cc0:	689a      	ldr	r2, [r3, #8]
 8000cc2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cc6:	2a08      	cmp	r2, #8
 8000cc8:	d111      	bne.n	8000cee <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	025e      	lsls	r6, r3, #9
 8000cce:	d40e      	bmi.n	8000cee <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd0:	4b7a      	ldr	r3, [pc, #488]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	0795      	lsls	r5, r2, #30
 8000cd6:	d502      	bpl.n	8000cde <HAL_RCC_OscConfig+0xf6>
 8000cd8:	68e2      	ldr	r2, [r4, #12]
 8000cda:	2a01      	cmp	r2, #1
 8000cdc:	d188      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	6921      	ldr	r1, [r4, #16]
 8000ce2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000ce6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000cea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cec:	e78a      	b.n	8000c04 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cee:	68e2      	ldr	r2, [r4, #12]
 8000cf0:	4b73      	ldr	r3, [pc, #460]	; (8000ec0 <HAL_RCC_OscConfig+0x2d8>)
 8000cf2:	b1b2      	cbz	r2, 8000d22 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cf8:	f7ff fc44 	bl	8000584 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfc:	4d6f      	ldr	r5, [pc, #444]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000cfe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	682b      	ldr	r3, [r5, #0]
 8000d02:	0798      	lsls	r0, r3, #30
 8000d04:	d507      	bpl.n	8000d16 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d06:	682b      	ldr	r3, [r5, #0]
 8000d08:	6922      	ldr	r2, [r4, #16]
 8000d0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d12:	602b      	str	r3, [r5, #0]
 8000d14:	e776      	b.n	8000c04 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d16:	f7ff fc35 	bl	8000584 <HAL_GetTick>
 8000d1a:	1b80      	subs	r0, r0, r6
 8000d1c:	2802      	cmp	r0, #2
 8000d1e:	d9ef      	bls.n	8000d00 <HAL_RCC_OscConfig+0x118>
 8000d20:	e7a9      	b.n	8000c76 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000d22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d24:	f7ff fc2e 	bl	8000584 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d28:	4d64      	ldr	r5, [pc, #400]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000d2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2c:	682b      	ldr	r3, [r5, #0]
 8000d2e:	0799      	lsls	r1, r3, #30
 8000d30:	f57f af68 	bpl.w	8000c04 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d34:	f7ff fc26 	bl	8000584 <HAL_GetTick>
 8000d38:	1b80      	subs	r0, r0, r6
 8000d3a:	2802      	cmp	r0, #2
 8000d3c:	d9f6      	bls.n	8000d2c <HAL_RCC_OscConfig+0x144>
 8000d3e:	e79a      	b.n	8000c76 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d40:	6962      	ldr	r2, [r4, #20]
 8000d42:	4b60      	ldr	r3, [pc, #384]	; (8000ec4 <HAL_RCC_OscConfig+0x2dc>)
 8000d44:	b17a      	cbz	r2, 8000d66 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d4a:	f7ff fc1b 	bl	8000584 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4e:	4d5b      	ldr	r5, [pc, #364]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000d50:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d52:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d54:	079f      	lsls	r7, r3, #30
 8000d56:	f53f af59 	bmi.w	8000c0c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fc13 	bl	8000584 <HAL_GetTick>
 8000d5e:	1b80      	subs	r0, r0, r6
 8000d60:	2802      	cmp	r0, #2
 8000d62:	d9f6      	bls.n	8000d52 <HAL_RCC_OscConfig+0x16a>
 8000d64:	e787      	b.n	8000c76 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000d66:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d68:	f7ff fc0c 	bl	8000584 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d6c:	4d53      	ldr	r5, [pc, #332]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000d6e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d70:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d72:	0798      	lsls	r0, r3, #30
 8000d74:	f57f af4a 	bpl.w	8000c0c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d78:	f7ff fc04 	bl	8000584 <HAL_GetTick>
 8000d7c:	1b80      	subs	r0, r0, r6
 8000d7e:	2802      	cmp	r0, #2
 8000d80:	d9f6      	bls.n	8000d70 <HAL_RCC_OscConfig+0x188>
 8000d82:	e778      	b.n	8000c76 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d84:	4b4d      	ldr	r3, [pc, #308]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
 8000d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d88:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000d8c:	d128      	bne.n	8000de0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	9201      	str	r2, [sp, #4]
 8000d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d96:	641a      	str	r2, [r3, #64]	; 0x40
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000da2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da4:	4d48      	ldr	r5, [pc, #288]	; (8000ec8 <HAL_RCC_OscConfig+0x2e0>)
 8000da6:	682b      	ldr	r3, [r5, #0]
 8000da8:	05d9      	lsls	r1, r3, #23
 8000daa:	d51b      	bpl.n	8000de4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dac:	68a3      	ldr	r3, [r4, #8]
 8000dae:	4d43      	ldr	r5, [pc, #268]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d127      	bne.n	8000e04 <HAL_RCC_OscConfig+0x21c>
 8000db4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000dbc:	f7ff fbe2 	bl	8000584 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dc0:	4d3e      	ldr	r5, [pc, #248]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000dc2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dc8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dca:	079b      	lsls	r3, r3, #30
 8000dcc:	d539      	bpl.n	8000e42 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f43f af20 	beq.w	8000c14 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dd4:	4a39      	ldr	r2, [pc, #228]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
 8000dd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	e719      	b.n	8000c14 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000de0:	2600      	movs	r6, #0
 8000de2:	e7df      	b.n	8000da4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000dec:	f7ff fbca 	bl	8000584 <HAL_GetTick>
 8000df0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df2:	682b      	ldr	r3, [r5, #0]
 8000df4:	05da      	lsls	r2, r3, #23
 8000df6:	d4d9      	bmi.n	8000dac <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000df8:	f7ff fbc4 	bl	8000584 <HAL_GetTick>
 8000dfc:	1bc0      	subs	r0, r0, r7
 8000dfe:	2802      	cmp	r0, #2
 8000e00:	d9f7      	bls.n	8000df2 <HAL_RCC_OscConfig+0x20a>
 8000e02:	e738      	b.n	8000c76 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e04:	2b05      	cmp	r3, #5
 8000e06:	d104      	bne.n	8000e12 <HAL_RCC_OscConfig+0x22a>
 8000e08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	672b      	str	r3, [r5, #112]	; 0x70
 8000e10:	e7d0      	b.n	8000db4 <HAL_RCC_OscConfig+0x1cc>
 8000e12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e14:	f022 0201 	bic.w	r2, r2, #1
 8000e18:	672a      	str	r2, [r5, #112]	; 0x70
 8000e1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e1c:	f022 0204 	bic.w	r2, r2, #4
 8000e20:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1ca      	bne.n	8000dbc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000e26:	f7ff fbad 	bl	8000584 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e2e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e32:	0798      	lsls	r0, r3, #30
 8000e34:	d5cb      	bpl.n	8000dce <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e36:	f7ff fba5 	bl	8000584 <HAL_GetTick>
 8000e3a:	1bc0      	subs	r0, r0, r7
 8000e3c:	4540      	cmp	r0, r8
 8000e3e:	d9f7      	bls.n	8000e30 <HAL_RCC_OscConfig+0x248>
 8000e40:	e719      	b.n	8000c76 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e42:	f7ff fb9f 	bl	8000584 <HAL_GetTick>
 8000e46:	1bc0      	subs	r0, r0, r7
 8000e48:	4540      	cmp	r0, r8
 8000e4a:	d9bd      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x1e0>
 8000e4c:	e713      	b.n	8000c76 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e4e:	4d1b      	ldr	r5, [pc, #108]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
 8000e50:	68ab      	ldr	r3, [r5, #8]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b08      	cmp	r3, #8
 8000e58:	f43f aeca 	beq.w	8000bf0 <HAL_RCC_OscConfig+0x8>
 8000e5c:	4e1b      	ldr	r6, [pc, #108]	; (8000ecc <HAL_RCC_OscConfig+0x2e4>)
 8000e5e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e60:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e62:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e64:	d134      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000e66:	f7ff fb8d 	bl	8000584 <HAL_GetTick>
 8000e6a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	0199      	lsls	r1, r3, #6
 8000e70:	d41e      	bmi.n	8000eb0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e72:	6a22      	ldr	r2, [r4, #32]
 8000e74:	69e3      	ldr	r3, [r4, #28]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e7a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000e7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000e84:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e86:	4c0d      	ldr	r4, [pc, #52]	; (8000ebc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e88:	0852      	lsrs	r2, r2, #1
 8000e8a:	3a01      	subs	r2, #1
 8000e8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e90:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e92:	2301      	movs	r3, #1
 8000e94:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000e96:	f7ff fb75 	bl	8000584 <HAL_GetTick>
 8000e9a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	019a      	lsls	r2, r3, #6
 8000ea0:	f53f aebc 	bmi.w	8000c1c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea4:	f7ff fb6e 	bl	8000584 <HAL_GetTick>
 8000ea8:	1b40      	subs	r0, r0, r5
 8000eaa:	2802      	cmp	r0, #2
 8000eac:	d9f6      	bls.n	8000e9c <HAL_RCC_OscConfig+0x2b4>
 8000eae:	e6e2      	b.n	8000c76 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eb0:	f7ff fb68 	bl	8000584 <HAL_GetTick>
 8000eb4:	1bc0      	subs	r0, r0, r7
 8000eb6:	2802      	cmp	r0, #2
 8000eb8:	d9d8      	bls.n	8000e6c <HAL_RCC_OscConfig+0x284>
 8000eba:	e6dc      	b.n	8000c76 <HAL_RCC_OscConfig+0x8e>
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	42470000 	.word	0x42470000
 8000ec4:	42470e80 	.word	0x42470e80
 8000ec8:	40007000 	.word	0x40007000
 8000ecc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fb58 	bl	8000584 <HAL_GetTick>
 8000ed4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ed6:	682b      	ldr	r3, [r5, #0]
 8000ed8:	019b      	lsls	r3, r3, #6
 8000eda:	f57f ae9f 	bpl.w	8000c1c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ede:	f7ff fb51 	bl	8000584 <HAL_GetTick>
 8000ee2:	1b00      	subs	r0, r0, r4
 8000ee4:	2802      	cmp	r0, #2
 8000ee6:	d9f6      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x2ee>
 8000ee8:	e6c5      	b.n	8000c76 <HAL_RCC_OscConfig+0x8e>
 8000eea:	bf00      	nop

08000eec <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000eec:	4913      	ldr	r1, [pc, #76]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000eee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ef0:	688b      	ldr	r3, [r1, #8]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	d003      	beq.n	8000f02 <HAL_RCC_GetSysClockFreq+0x16>
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d003      	beq.n	8000f06 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000efe:	4810      	ldr	r0, [pc, #64]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f00:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000f02:	4810      	ldr	r0, [pc, #64]	; (8000f44 <HAL_RCC_GetSysClockFreq+0x58>)
 8000f04:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f08:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f0a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f0c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f10:	bf14      	ite	ne
 8000f12:	480c      	ldrne	r0, [pc, #48]	; (8000f44 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f14:	480a      	ldreq	r0, [pc, #40]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f16:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f1a:	bf18      	it	ne
 8000f1c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f22:	fba1 0100 	umull	r0, r1, r1, r0
 8000f26:	f7ff f95b 	bl	80001e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x50>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f32:	3301      	adds	r3, #1
 8000f34:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000f36:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f3a:	bd08      	pop	{r3, pc}
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	00f42400 	.word	0x00f42400
 8000f44:	007a1200 	.word	0x007a1200

08000f48 <HAL_RCC_ClockConfig>:
{
 8000f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f4e:	4604      	mov	r4, r0
 8000f50:	b910      	cbnz	r0, 8000f58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f52:	2001      	movs	r0, #1
 8000f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f58:	4b44      	ldr	r3, [pc, #272]	; (800106c <HAL_RCC_ClockConfig+0x124>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	f002 020f 	and.w	r2, r2, #15
 8000f60:	428a      	cmp	r2, r1
 8000f62:	d328      	bcc.n	8000fb6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f64:	6821      	ldr	r1, [r4, #0]
 8000f66:	078f      	lsls	r7, r1, #30
 8000f68:	d42d      	bmi.n	8000fc6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f6a:	07c8      	lsls	r0, r1, #31
 8000f6c:	d440      	bmi.n	8000ff0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f6e:	4b3f      	ldr	r3, [pc, #252]	; (800106c <HAL_RCC_ClockConfig+0x124>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	f002 020f 	and.w	r2, r2, #15
 8000f76:	4295      	cmp	r5, r2
 8000f78:	d366      	bcc.n	8001048 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f7a:	6822      	ldr	r2, [r4, #0]
 8000f7c:	0751      	lsls	r1, r2, #29
 8000f7e:	d46c      	bmi.n	800105a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f80:	0713      	lsls	r3, r2, #28
 8000f82:	d507      	bpl.n	8000f94 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f84:	4a3a      	ldr	r2, [pc, #232]	; (8001070 <HAL_RCC_ClockConfig+0x128>)
 8000f86:	6921      	ldr	r1, [r4, #16]
 8000f88:	6893      	ldr	r3, [r2, #8]
 8000f8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000f8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f94:	f7ff ffaa 	bl	8000eec <HAL_RCC_GetSysClockFreq>
 8000f98:	4b35      	ldr	r3, [pc, #212]	; (8001070 <HAL_RCC_ClockConfig+0x128>)
 8000f9a:	4a36      	ldr	r2, [pc, #216]	; (8001074 <HAL_RCC_ClockConfig+0x12c>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fa2:	5cd3      	ldrb	r3, [r2, r3]
 8000fa4:	40d8      	lsrs	r0, r3
 8000fa6:	4b34      	ldr	r3, [pc, #208]	; (8001078 <HAL_RCC_ClockConfig+0x130>)
 8000fa8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000faa:	200f      	movs	r0, #15
 8000fac:	f7ff faa0 	bl	80004f0 <HAL_InitTick>
  return HAL_OK;
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fb6:	b2ca      	uxtb	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	4299      	cmp	r1, r3
 8000fc2:	d1c6      	bne.n	8000f52 <HAL_RCC_ClockConfig+0xa>
 8000fc4:	e7ce      	b.n	8000f64 <HAL_RCC_ClockConfig+0x1c>
 8000fc6:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fcc:	bf1e      	ittt	ne
 8000fce:	689a      	ldrne	r2, [r3, #8]
 8000fd0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000fd4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fd8:	bf42      	ittt	mi
 8000fda:	689a      	ldrmi	r2, [r3, #8]
 8000fdc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000fe0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	68a0      	ldr	r0, [r4, #8]
 8000fe6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000fea:	4302      	orrs	r2, r0
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	e7bc      	b.n	8000f6a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff0:	6862      	ldr	r2, [r4, #4]
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <HAL_RCC_ClockConfig+0x128>)
 8000ff4:	2a01      	cmp	r2, #1
 8000ff6:	d11d      	bne.n	8001034 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffe:	d0a8      	beq.n	8000f52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001000:	4e1b      	ldr	r6, [pc, #108]	; (8001070 <HAL_RCC_ClockConfig+0x128>)
 8001002:	68b3      	ldr	r3, [r6, #8]
 8001004:	f023 0303 	bic.w	r3, r3, #3
 8001008:	4313      	orrs	r3, r2
 800100a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800100c:	f7ff faba 	bl	8000584 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001010:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001014:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001016:	68b3      	ldr	r3, [r6, #8]
 8001018:	6862      	ldr	r2, [r4, #4]
 800101a:	f003 030c 	and.w	r3, r3, #12
 800101e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001022:	d0a4      	beq.n	8000f6e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001024:	f7ff faae 	bl	8000584 <HAL_GetTick>
 8001028:	1bc0      	subs	r0, r0, r7
 800102a:	4540      	cmp	r0, r8
 800102c:	d9f3      	bls.n	8001016 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800102e:	2003      	movs	r0, #3
}
 8001030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001034:	1e91      	subs	r1, r2, #2
 8001036:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001038:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800103a:	d802      	bhi.n	8001042 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001040:	e7dd      	b.n	8000ffe <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001042:	f013 0f02 	tst.w	r3, #2
 8001046:	e7da      	b.n	8000ffe <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001048:	b2ea      	uxtb	r2, r5
 800104a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	429d      	cmp	r5, r3
 8001054:	f47f af7d 	bne.w	8000f52 <HAL_RCC_ClockConfig+0xa>
 8001058:	e78f      	b.n	8000f7a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800105a:	4905      	ldr	r1, [pc, #20]	; (8001070 <HAL_RCC_ClockConfig+0x128>)
 800105c:	68e0      	ldr	r0, [r4, #12]
 800105e:	688b      	ldr	r3, [r1, #8]
 8001060:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001064:	4303      	orrs	r3, r0
 8001066:	608b      	str	r3, [r1, #8]
 8001068:	e78a      	b.n	8000f80 <HAL_RCC_ClockConfig+0x38>
 800106a:	bf00      	nop
 800106c:	40023c00 	.word	0x40023c00
 8001070:	40023800 	.word	0x40023800
 8001074:	08002914 	.word	0x08002914
 8001078:	2000000c 	.word	0x2000000c

0800107c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800107c:	4b04      	ldr	r3, [pc, #16]	; (8001090 <HAL_RCC_GetPCLK1Freq+0x14>)
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001086:	5cd3      	ldrb	r3, [r2, r3]
 8001088:	4a03      	ldr	r2, [pc, #12]	; (8001098 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800108a:	6810      	ldr	r0, [r2, #0]
}
 800108c:	40d8      	lsrs	r0, r3
 800108e:	4770      	bx	lr
 8001090:	40023800 	.word	0x40023800
 8001094:	08002924 	.word	0x08002924
 8001098:	2000000c 	.word	0x2000000c

0800109c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80010aa:	6810      	ldr	r0, [r2, #0]
}
 80010ac:	40d8      	lsrs	r0, r3
 80010ae:	4770      	bx	lr
 80010b0:	40023800 	.word	0x40023800
 80010b4:	08002924 	.word	0x08002924
 80010b8:	2000000c 	.word	0x2000000c

080010bc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80010bc:	6a03      	ldr	r3, [r0, #32]
 80010be:	f023 0301 	bic.w	r3, r3, #1
 80010c2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010c4:	6a03      	ldr	r3, [r0, #32]
{
 80010c6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80010c8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80010ca:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80010cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80010ce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80010d2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80010d4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80010d6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80010da:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80010dc:	4d0a      	ldr	r5, [pc, #40]	; (8001108 <TIM_OC1_SetConfig+0x4c>)
 80010de:	42a8      	cmp	r0, r5
 80010e0:	d10b      	bne.n	80010fa <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80010e2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80010e4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80010e6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80010ea:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80010ec:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80010ee:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80010f2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80010f4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80010f8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010fa:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80010fc:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80010fe:	684a      	ldr	r2, [r1, #4]
 8001100:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001102:	6203      	str	r3, [r0, #32]
 8001104:	bd70      	pop	{r4, r5, r6, pc}
 8001106:	bf00      	nop
 8001108:	40010000 	.word	0x40010000

0800110c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800110c:	6a03      	ldr	r3, [r0, #32]
 800110e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001112:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001114:	6a03      	ldr	r3, [r0, #32]
{
 8001116:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001118:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800111a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800111c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800111e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001122:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001124:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001126:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800112a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800112e:	4d0b      	ldr	r5, [pc, #44]	; (800115c <TIM_OC3_SetConfig+0x50>)
 8001130:	42a8      	cmp	r0, r5
 8001132:	d10d      	bne.n	8001150 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001134:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001136:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800113c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001140:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001142:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001146:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800114c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001150:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001152:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001154:	684a      	ldr	r2, [r1, #4]
 8001156:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001158:	6203      	str	r3, [r0, #32]
 800115a:	bd70      	pop	{r4, r5, r6, pc}
 800115c:	40010000 	.word	0x40010000

08001160 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001160:	6a03      	ldr	r3, [r0, #32]
 8001162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001166:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001168:	6a03      	ldr	r3, [r0, #32]
{
 800116a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800116c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800116e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001170:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001172:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001176:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800117a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800117c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001180:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001184:	4d06      	ldr	r5, [pc, #24]	; (80011a0 <TIM_OC4_SetConfig+0x40>)
 8001186:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001188:	bf02      	ittt	eq
 800118a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800118c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001190:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001194:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001196:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001198:	684a      	ldr	r2, [r1, #4]
 800119a:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800119c:	6203      	str	r3, [r0, #32]
 800119e:	bd30      	pop	{r4, r5, pc}
 80011a0:	40010000 	.word	0x40010000

080011a4 <HAL_TIM_PWM_MspInit>:
 80011a4:	4770      	bx	lr
	...

080011a8 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80011a8:	4a22      	ldr	r2, [pc, #136]	; (8001234 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 80011aa:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80011ac:	4290      	cmp	r0, r2
 80011ae:	d00e      	beq.n	80011ce <TIM_Base_SetConfig+0x26>
 80011b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011b4:	d00b      	beq.n	80011ce <TIM_Base_SetConfig+0x26>
 80011b6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80011ba:	4290      	cmp	r0, r2
 80011bc:	d007      	beq.n	80011ce <TIM_Base_SetConfig+0x26>
 80011be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c2:	4290      	cmp	r0, r2
 80011c4:	d003      	beq.n	80011ce <TIM_Base_SetConfig+0x26>
 80011c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ca:	4290      	cmp	r0, r2
 80011cc:	d119      	bne.n	8001202 <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 80011ce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011d4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80011d6:	4a17      	ldr	r2, [pc, #92]	; (8001234 <TIM_Base_SetConfig+0x8c>)
 80011d8:	4290      	cmp	r0, r2
 80011da:	d104      	bne.n	80011e6 <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011dc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80011de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011e2:	4313      	orrs	r3, r2
 80011e4:	e018      	b.n	8001218 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80011e6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011ea:	d0f7      	beq.n	80011dc <TIM_Base_SetConfig+0x34>
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <TIM_Base_SetConfig+0x90>)
 80011ee:	4290      	cmp	r0, r2
 80011f0:	d0f4      	beq.n	80011dc <TIM_Base_SetConfig+0x34>
 80011f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011f6:	4290      	cmp	r0, r2
 80011f8:	d0f0      	beq.n	80011dc <TIM_Base_SetConfig+0x34>
 80011fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011fe:	4290      	cmp	r0, r2
 8001200:	d0ec      	beq.n	80011dc <TIM_Base_SetConfig+0x34>
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <TIM_Base_SetConfig+0x94>)
 8001204:	4290      	cmp	r0, r2
 8001206:	d0e9      	beq.n	80011dc <TIM_Base_SetConfig+0x34>
 8001208:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800120c:	4290      	cmp	r0, r2
 800120e:	d0e5      	beq.n	80011dc <TIM_Base_SetConfig+0x34>
 8001210:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001214:	4290      	cmp	r0, r2
 8001216:	d0e1      	beq.n	80011dc <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 8001218:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800121a:	688b      	ldr	r3, [r1, #8]
 800121c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800121e:	680b      	ldr	r3, [r1, #0]
 8001220:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <TIM_Base_SetConfig+0x8c>)
 8001224:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001226:	bf04      	itt	eq
 8001228:	690b      	ldreq	r3, [r1, #16]
 800122a:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800122c:	2301      	movs	r3, #1
 800122e:	6143      	str	r3, [r0, #20]
}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40010000 	.word	0x40010000
 8001238:	40000400 	.word	0x40000400
 800123c:	40014000 	.word	0x40014000

08001240 <HAL_TIM_Base_Init>:
{ 
 8001240:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001242:	4604      	mov	r4, r0
 8001244:	b1a0      	cbz	r0, 8001270 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001246:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800124a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800124e:	b91b      	cbnz	r3, 8001258 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001250:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001254:	f001 fa34 	bl	80026c0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001258:	2302      	movs	r3, #2
 800125a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800125e:	6820      	ldr	r0, [r4, #0]
 8001260:	1d21      	adds	r1, r4, #4
 8001262:	f7ff ffa1 	bl	80011a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001266:	2301      	movs	r3, #1
 8001268:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800126c:	2000      	movs	r0, #0
 800126e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
}
 8001272:	bd10      	pop	{r4, pc}

08001274 <HAL_TIM_PWM_Init>:
{
 8001274:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001276:	4604      	mov	r4, r0
 8001278:	b1a0      	cbz	r0, 80012a4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800127a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800127e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001282:	b91b      	cbnz	r3, 800128c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001284:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8001288:	f7ff ff8c 	bl	80011a4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 800128c:	2302      	movs	r3, #2
 800128e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001292:	6820      	ldr	r0, [r4, #0]
 8001294:	1d21      	adds	r1, r4, #4
 8001296:	f7ff ff87 	bl	80011a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800129a:	2301      	movs	r3, #1
 800129c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80012a0:	2000      	movs	r0, #0
 80012a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012a4:	2001      	movs	r0, #1
}  
 80012a6:	bd10      	pop	{r4, pc}

080012a8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012a8:	6a03      	ldr	r3, [r0, #32]
 80012aa:	f023 0310 	bic.w	r3, r3, #16
 80012ae:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80012b0:	6a03      	ldr	r3, [r0, #32]
{
 80012b2:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 80012b4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80012b6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80012b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80012ba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80012be:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80012c2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80012c4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80012c8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80012cc:	4d0b      	ldr	r5, [pc, #44]	; (80012fc <TIM_OC2_SetConfig+0x54>)
 80012ce:	42a8      	cmp	r0, r5
 80012d0:	d10d      	bne.n	80012ee <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80012d2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80012d4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80012d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80012da:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80012de:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80012e0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80012e4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80012e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80012ea:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80012ee:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80012f0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80012f2:	684a      	ldr	r2, [r1, #4]
 80012f4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80012f6:	6203      	str	r3, [r0, #32]
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
 80012fa:	bf00      	nop
 80012fc:	40010000 	.word	0x40010000

08001300 <HAL_TIM_PWM_ConfigChannel>:
{
 8001300:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001302:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001306:	2b01      	cmp	r3, #1
{
 8001308:	4604      	mov	r4, r0
 800130a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800130e:	d025      	beq.n	800135c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001310:	2301      	movs	r3, #1
 8001312:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001316:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 800131a:	2a0c      	cmp	r2, #12
 800131c:	d818      	bhi.n	8001350 <HAL_TIM_PWM_ConfigChannel+0x50>
 800131e:	e8df f002 	tbb	[pc, r2]
 8001322:	1707      	.short	0x1707
 8001324:	171e1717 	.word	0x171e1717
 8001328:	172f1717 	.word	0x172f1717
 800132c:	1717      	.short	0x1717
 800132e:	40          	.byte	0x40
 800132f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001330:	6820      	ldr	r0, [r4, #0]
 8001332:	f7ff fec3 	bl	80010bc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001336:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001338:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	f042 0208 	orr.w	r2, r2, #8
 8001340:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	f022 0204 	bic.w	r2, r2, #4
 8001348:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800134a:	699a      	ldr	r2, [r3, #24]
 800134c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800134e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001350:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001352:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001354:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001358:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800135c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800135e:	6820      	ldr	r0, [r4, #0]
 8001360:	f7ff ffa2 	bl	80012a8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001364:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001366:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001368:	699a      	ldr	r2, [r3, #24]
 800136a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800136e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800137e:	e7e6      	b.n	800134e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001380:	6820      	ldr	r0, [r4, #0]
 8001382:	f7ff fec3 	bl	800110c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001386:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001388:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800138a:	69da      	ldr	r2, [r3, #28]
 800138c:	f042 0208 	orr.w	r2, r2, #8
 8001390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001392:	69da      	ldr	r2, [r3, #28]
 8001394:	f022 0204 	bic.w	r2, r2, #4
 8001398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800139a:	69da      	ldr	r2, [r3, #28]
 800139c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800139e:	61da      	str	r2, [r3, #28]
    break;
 80013a0:	e7d6      	b.n	8001350 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80013a2:	6820      	ldr	r0, [r4, #0]
 80013a4:	f7ff fedc 	bl	8001160 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80013a8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80013aa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80013ac:	69da      	ldr	r2, [r3, #28]
 80013ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80013b4:	69da      	ldr	r2, [r3, #28]
 80013b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80013bc:	69da      	ldr	r2, [r3, #28]
 80013be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013c2:	e7ec      	b.n	800139e <HAL_TIM_PWM_ConfigChannel+0x9e>

080013c4 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80013c4:	6a03      	ldr	r3, [r0, #32]
{
 80013c6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80013c8:	2401      	movs	r4, #1
 80013ca:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80013cc:	ea23 0304 	bic.w	r3, r3, r4
 80013d0:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80013d2:	6a03      	ldr	r3, [r0, #32]
 80013d4:	408a      	lsls	r2, r1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	6202      	str	r2, [r0, #32]
 80013da:	bd10      	pop	{r4, pc}

080013dc <HAL_TIM_PWM_Start>:
{
 80013dc:	b510      	push	{r4, lr}
 80013de:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80013e0:	2201      	movs	r2, #1
 80013e2:	6800      	ldr	r0, [r0, #0]
 80013e4:	f7ff ffee 	bl	80013c4 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_TIM_PWM_Start+0x28>)
 80013ec:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80013ee:	bf02      	ittt	eq
 80013f0:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80013f2:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80013f6:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
} 
 8001400:	2000      	movs	r0, #0
 8001402:	bd10      	pop	{r4, pc}
 8001404:	40010000 	.word	0x40010000

08001408 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800140c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800140e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001410:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001412:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001414:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001418:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800141a:	6133      	str	r3, [r6, #16]
{
 800141c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800141e:	6883      	ldr	r3, [r0, #8]
 8001420:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001422:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001424:	4303      	orrs	r3, r0
 8001426:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001428:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800142c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800142e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001432:	430b      	orrs	r3, r1
 8001434:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001436:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001438:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800143a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800143c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001440:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001442:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001446:	6173      	str	r3, [r6, #20]
 8001448:	4b7a      	ldr	r3, [pc, #488]	; (8001634 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800144a:	d17c      	bne.n	8001546 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800144c:	429e      	cmp	r6, r3
 800144e:	d003      	beq.n	8001458 <UART_SetConfig+0x50>
 8001450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001454:	429e      	cmp	r6, r3
 8001456:	d144      	bne.n	80014e2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001458:	f7ff fe20 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 800145c:	2519      	movs	r5, #25
 800145e:	fb05 f300 	mul.w	r3, r5, r0
 8001462:	6860      	ldr	r0, [r4, #4]
 8001464:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001468:	0040      	lsls	r0, r0, #1
 800146a:	fbb3 f3f0 	udiv	r3, r3, r0
 800146e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001472:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001476:	f7ff fe11 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 800147a:	6863      	ldr	r3, [r4, #4]
 800147c:	4368      	muls	r0, r5
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fbb0 f7f3 	udiv	r7, r0, r3
 8001484:	f7ff fe0a 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 8001488:	6863      	ldr	r3, [r4, #4]
 800148a:	4368      	muls	r0, r5
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001492:	fbb3 f3f9 	udiv	r3, r3, r9
 8001496:	fb09 7313 	mls	r3, r9, r3, r7
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	3332      	adds	r3, #50	; 0x32
 800149e:	fbb3 f3f9 	udiv	r3, r3, r9
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80014a8:	f7ff fdf8 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 80014ac:	6862      	ldr	r2, [r4, #4]
 80014ae:	4368      	muls	r0, r5
 80014b0:	0052      	lsls	r2, r2, #1
 80014b2:	fbb0 faf2 	udiv	sl, r0, r2
 80014b6:	f7ff fdf1 	bl	800109c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014ba:	6863      	ldr	r3, [r4, #4]
 80014bc:	4368      	muls	r0, r5
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80014c8:	fb09 a313 	mls	r3, r9, r3, sl
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	3332      	adds	r3, #50	; 0x32
 80014d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014da:	443b      	add	r3, r7
 80014dc:	60b3      	str	r3, [r6, #8]
 80014de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014e2:	f7ff fdcb 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 80014e6:	2519      	movs	r5, #25
 80014e8:	fb05 f300 	mul.w	r3, r5, r0
 80014ec:	6860      	ldr	r0, [r4, #4]
 80014ee:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014f2:	0040      	lsls	r0, r0, #1
 80014f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80014f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80014fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001500:	f7ff fdbc 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 8001504:	6863      	ldr	r3, [r4, #4]
 8001506:	4368      	muls	r0, r5
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fbb0 f7f3 	udiv	r7, r0, r3
 800150e:	f7ff fdb5 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 8001512:	6863      	ldr	r3, [r4, #4]
 8001514:	4368      	muls	r0, r5
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fbb0 f3f3 	udiv	r3, r0, r3
 800151c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001520:	fb09 7313 	mls	r3, r9, r3, r7
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	3332      	adds	r3, #50	; 0x32
 8001528:	fbb3 f3f9 	udiv	r3, r3, r9
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001532:	f7ff fda3 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 8001536:	6862      	ldr	r2, [r4, #4]
 8001538:	4368      	muls	r0, r5
 800153a:	0052      	lsls	r2, r2, #1
 800153c:	fbb0 faf2 	udiv	sl, r0, r2
 8001540:	f7ff fd9c 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 8001544:	e7b9      	b.n	80014ba <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001546:	429e      	cmp	r6, r3
 8001548:	d002      	beq.n	8001550 <UART_SetConfig+0x148>
 800154a:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <UART_SetConfig+0x230>)
 800154c:	429e      	cmp	r6, r3
 800154e:	d140      	bne.n	80015d2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001550:	f7ff fda4 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 8001554:	6867      	ldr	r7, [r4, #4]
 8001556:	2519      	movs	r5, #25
 8001558:	f04f 0964 	mov.w	r9, #100	; 0x64
 800155c:	fb05 f300 	mul.w	r3, r5, r0
 8001560:	00bf      	lsls	r7, r7, #2
 8001562:	fbb3 f3f7 	udiv	r3, r3, r7
 8001566:	fbb3 f3f9 	udiv	r3, r3, r9
 800156a:	011f      	lsls	r7, r3, #4
 800156c:	f7ff fd96 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 8001570:	6863      	ldr	r3, [r4, #4]
 8001572:	4368      	muls	r0, r5
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	fbb0 f8f3 	udiv	r8, r0, r3
 800157a:	f7ff fd8f 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 800157e:	6863      	ldr	r3, [r4, #4]
 8001580:	4368      	muls	r0, r5
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	fbb0 f3f3 	udiv	r3, r0, r3
 8001588:	fbb3 f3f9 	udiv	r3, r3, r9
 800158c:	fb09 8313 	mls	r3, r9, r3, r8
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	3332      	adds	r3, #50	; 0x32
 8001594:	fbb3 f3f9 	udiv	r3, r3, r9
 8001598:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800159c:	f7ff fd7e 	bl	800109c <HAL_RCC_GetPCLK2Freq>
 80015a0:	6862      	ldr	r2, [r4, #4]
 80015a2:	4368      	muls	r0, r5
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	fbb0 faf2 	udiv	sl, r0, r2
 80015aa:	f7ff fd77 	bl	800109c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015ae:	6863      	ldr	r3, [r4, #4]
 80015b0:	4368      	muls	r0, r5
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80015bc:	fb09 a313 	mls	r3, r9, r3, sl
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	3332      	adds	r3, #50	; 0x32
 80015c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	ea43 0308 	orr.w	r3, r3, r8
 80015d0:	e783      	b.n	80014da <UART_SetConfig+0xd2>
 80015d2:	f7ff fd53 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 80015d6:	6867      	ldr	r7, [r4, #4]
 80015d8:	2519      	movs	r5, #25
 80015da:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015de:	fb05 f300 	mul.w	r3, r5, r0
 80015e2:	00bf      	lsls	r7, r7, #2
 80015e4:	fbb3 f3f7 	udiv	r3, r3, r7
 80015e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80015ec:	011f      	lsls	r7, r3, #4
 80015ee:	f7ff fd45 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 80015f2:	6863      	ldr	r3, [r4, #4]
 80015f4:	4368      	muls	r0, r5
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	fbb0 f8f3 	udiv	r8, r0, r3
 80015fc:	f7ff fd3e 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 8001600:	6863      	ldr	r3, [r4, #4]
 8001602:	4368      	muls	r0, r5
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	fbb3 f3f9 	udiv	r3, r3, r9
 800160e:	fb09 8313 	mls	r3, r9, r3, r8
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	3332      	adds	r3, #50	; 0x32
 8001616:	fbb3 f3f9 	udiv	r3, r3, r9
 800161a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800161e:	f7ff fd2d 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 8001622:	6862      	ldr	r2, [r4, #4]
 8001624:	4368      	muls	r0, r5
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	fbb0 faf2 	udiv	sl, r0, r2
 800162c:	f7ff fd26 	bl	800107c <HAL_RCC_GetPCLK1Freq>
 8001630:	e7bd      	b.n	80015ae <UART_SetConfig+0x1a6>
 8001632:	bf00      	nop
 8001634:	40011000 	.word	0x40011000
 8001638:	40011400 	.word	0x40011400

0800163c <HAL_UART_Init>:
{
 800163c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800163e:	4604      	mov	r4, r0
 8001640:	b340      	cbz	r0, 8001694 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001642:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001646:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800164a:	b91b      	cbnz	r3, 8001654 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800164c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001650:	f001 f87a 	bl	8002748 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001654:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001656:	2324      	movs	r3, #36	; 0x24
 8001658:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800165c:	68d3      	ldr	r3, [r2, #12]
 800165e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001662:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fecf 	bl	8001408 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800166a:	6823      	ldr	r3, [r4, #0]
 800166c:	691a      	ldr	r2, [r3, #16]
 800166e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001672:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001674:	695a      	ldr	r2, [r3, #20]
 8001676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800167a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001682:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001684:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001686:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001688:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800168a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800168e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001692:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001694:	2001      	movs	r0, #1
}
 8001696:	bd10      	pop	{r4, pc}

08001698 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001698:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800169a:	f000 fbe5 	bl	8001e68 <vTaskStartScheduler>
  
  return osOK;
}
 800169e:	2000      	movs	r0, #0
 80016a0:	bd08      	pop	{r3, pc}

080016a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80016a2:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80016a4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80016a8:	8a02      	ldrh	r2, [r0, #16]
{
 80016aa:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80016ac:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 80016b0:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80016b2:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80016b4:	bf14      	ite	ne
 80016b6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80016b8:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80016ba:	a803      	add	r0, sp, #12
 80016bc:	9001      	str	r0, [sp, #4]
 80016be:	9400      	str	r4, [sp, #0]
 80016c0:	4628      	mov	r0, r5
 80016c2:	f000 fb01 	bl	8001cc8 <xTaskCreate>
 80016c6:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80016c8:	bf0c      	ite	eq
 80016ca:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80016cc:	2000      	movne	r0, #0
}
 80016ce:	b005      	add	sp, #20
 80016d0:	bd30      	pop	{r4, r5, pc}

080016d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80016d2:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80016d4:	2800      	cmp	r0, #0
 80016d6:	bf08      	it	eq
 80016d8:	2001      	moveq	r0, #1
 80016da:	f000 fd13 	bl	8002104 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80016de:	2000      	movs	r0, #0
 80016e0:	bd08      	pop	{r3, pc}

080016e2 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80016e2:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016e4:	f000 fda6 	bl	8002234 <xTaskGetSchedulerState>
 80016e8:	2801      	cmp	r0, #1
 80016ea:	d003      	beq.n	80016f4 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80016ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80016f0:	f000 b908 	b.w	8001904 <xPortSysTickHandler>
 80016f4:	bd08      	pop	{r3, pc}

080016f6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016f6:	f100 0308 	add.w	r3, r0, #8
 80016fa:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80016fc:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001700:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001702:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001704:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001706:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001708:	6003      	str	r3, [r0, #0]
 800170a:	4770      	bx	lr

0800170c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800170c:	2300      	movs	r3, #0
 800170e:	6103      	str	r3, [r0, #16]
 8001710:	4770      	bx	lr

08001712 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001712:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001714:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800171e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001720:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001722:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001724:	3301      	adds	r3, #1
 8001726:	6003      	str	r3, [r0, #0]
 8001728:	4770      	bx	lr

0800172a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800172a:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800172c:	1c53      	adds	r3, r2, #1
{
 800172e:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001730:	d10a      	bne.n	8001748 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001732:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001738:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800173a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800173c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800173e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001740:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001742:	3301      	adds	r3, #1
 8001744:	6003      	str	r3, [r0, #0]
 8001746:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001748:	f100 0308 	add.w	r3, r0, #8
 800174c:	685c      	ldr	r4, [r3, #4]
 800174e:	6825      	ldr	r5, [r4, #0]
 8001750:	42aa      	cmp	r2, r5
 8001752:	d3ef      	bcc.n	8001734 <vListInsert+0xa>
 8001754:	4623      	mov	r3, r4
 8001756:	e7f9      	b.n	800174c <vListInsert+0x22>

08001758 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001758:	6841      	ldr	r1, [r0, #4]
 800175a:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800175c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800175e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001760:	6882      	ldr	r2, [r0, #8]
 8001762:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001764:	6859      	ldr	r1, [r3, #4]
 8001766:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001768:	bf08      	it	eq
 800176a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800176c:	2200      	movs	r2, #0
 800176e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	3801      	subs	r0, #1
 8001774:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001776:	4770      	bx	lr

08001778 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <prvTaskExitError+0x2c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	d008      	beq.n	8001792 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001784:	f383 8811 	msr	BASEPRI, r3
 8001788:	f3bf 8f6f 	isb	sy
 800178c:	f3bf 8f4f 	dsb	sy
 8001790:	e7fe      	b.n	8001790 <prvTaskExitError+0x18>
 8001792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001796:	f383 8811 	msr	BASEPRI, r3
 800179a:	f3bf 8f6f 	isb	sy
 800179e:	f3bf 8f4f 	dsb	sy
 80017a2:	e7fe      	b.n	80017a2 <prvTaskExitError+0x2a>
 80017a4:	20000008 	.word	0x20000008

080017a8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80017a8:	4806      	ldr	r0, [pc, #24]	; (80017c4 <prvPortStartFirstTask+0x1c>)
 80017aa:	6800      	ldr	r0, [r0, #0]
 80017ac:	6800      	ldr	r0, [r0, #0]
 80017ae:	f380 8808 	msr	MSP, r0
 80017b2:	b662      	cpsie	i
 80017b4:	b661      	cpsie	f
 80017b6:	f3bf 8f4f 	dsb	sy
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	df00      	svc	0
 80017c0:	bf00      	nop
 80017c2:	0000      	.short	0x0000
 80017c4:	e000ed08 	.word	0xe000ed08

080017c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80017c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80017d8 <vPortEnableVFP+0x10>
 80017cc:	6801      	ldr	r1, [r0, #0]
 80017ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80017d2:	6001      	str	r1, [r0, #0]
 80017d4:	4770      	bx	lr
 80017d6:	0000      	.short	0x0000
 80017d8:	e000ed88 	.word	0xe000ed88

080017dc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80017dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017e0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <pxPortInitialiseStack+0x28>)
 80017e6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80017ea:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80017ee:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80017f2:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80017f6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80017fa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80017fe:	3844      	subs	r0, #68	; 0x44
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	08001779 	.word	0x08001779
	...

08001810 <SVC_Handler>:
	__asm volatile (
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <pxCurrentTCBConst2>)
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	6808      	ldr	r0, [r1, #0]
 8001816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800181a:	f380 8809 	msr	PSP, r0
 800181e:	f3bf 8f6f 	isb	sy
 8001822:	f04f 0000 	mov.w	r0, #0
 8001826:	f380 8811 	msr	BASEPRI, r0
 800182a:	4770      	bx	lr
 800182c:	f3af 8000 	nop.w

08001830 <pxCurrentTCBConst2>:
 8001830:	20003c4c 	.word	0x20003c4c

08001834 <vPortEnterCritical>:
 8001834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001838:	f383 8811 	msr	BASEPRI, r3
 800183c:	f3bf 8f6f 	isb	sy
 8001840:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001844:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <vPortEnterCritical+0x3c>)
 8001846:	6813      	ldr	r3, [r2, #0]
 8001848:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800184a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800184c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800184e:	d10d      	bne.n	800186c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <vPortEnterCritical+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001858:	d008      	beq.n	800186c <vPortEnterCritical+0x38>
 800185a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185e:	f383 8811 	msr	BASEPRI, r3
 8001862:	f3bf 8f6f 	isb	sy
 8001866:	f3bf 8f4f 	dsb	sy
 800186a:	e7fe      	b.n	800186a <vPortEnterCritical+0x36>
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008
 8001874:	e000ed04 	.word	0xe000ed04

08001878 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001878:	4a08      	ldr	r2, [pc, #32]	; (800189c <vPortExitCritical+0x24>)
 800187a:	6813      	ldr	r3, [r2, #0]
 800187c:	b943      	cbnz	r3, 8001890 <vPortExitCritical+0x18>
 800187e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001882:	f383 8811 	msr	BASEPRI, r3
 8001886:	f3bf 8f6f 	isb	sy
 800188a:	f3bf 8f4f 	dsb	sy
 800188e:	e7fe      	b.n	800188e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001890:	3b01      	subs	r3, #1
 8001892:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001894:	b90b      	cbnz	r3, 800189a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001896:	f383 8811 	msr	BASEPRI, r3
 800189a:	4770      	bx	lr
 800189c:	20000008 	.word	0x20000008

080018a0 <PendSV_Handler>:
	__asm volatile
 80018a0:	f3ef 8009 	mrs	r0, PSP
 80018a4:	f3bf 8f6f 	isb	sy
 80018a8:	4b15      	ldr	r3, [pc, #84]	; (8001900 <pxCurrentTCBConst>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	f01e 0f10 	tst.w	lr, #16
 80018b0:	bf08      	it	eq
 80018b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80018b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018ba:	6010      	str	r0, [r2, #0]
 80018bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80018c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80018c4:	f380 8811 	msr	BASEPRI, r0
 80018c8:	f3bf 8f4f 	dsb	sy
 80018cc:	f3bf 8f6f 	isb	sy
 80018d0:	f000 fc76 	bl	80021c0 <vTaskSwitchContext>
 80018d4:	f04f 0000 	mov.w	r0, #0
 80018d8:	f380 8811 	msr	BASEPRI, r0
 80018dc:	bc08      	pop	{r3}
 80018de:	6819      	ldr	r1, [r3, #0]
 80018e0:	6808      	ldr	r0, [r1, #0]
 80018e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e6:	f01e 0f10 	tst.w	lr, #16
 80018ea:	bf08      	it	eq
 80018ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80018f0:	f380 8809 	msr	PSP, r0
 80018f4:	f3bf 8f6f 	isb	sy
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	f3af 8000 	nop.w

08001900 <pxCurrentTCBConst>:
 8001900:	20003c4c 	.word	0x20003c4c

08001904 <xPortSysTickHandler>:
{
 8001904:	b508      	push	{r3, lr}
	__asm volatile
 8001906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190a:	f383 8811 	msr	BASEPRI, r3
 800190e:	f3bf 8f6f 	isb	sy
 8001912:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001916:	f000 faeb 	bl	8001ef0 <xTaskIncrementTick>
 800191a:	b118      	cbz	r0, 8001924 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <xPortSysTickHandler+0x28>)
 800191e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001922:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001924:	2300      	movs	r3, #0
 8001926:	f383 8811 	msr	BASEPRI, r3
 800192a:	bd08      	pop	{r3, pc}
 800192c:	e000ed04 	.word	0xe000ed04

08001930 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <vPortSetupTimerInterrupt+0x1c>)
 8001932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fbb3 f3f2 	udiv	r3, r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <vPortSetupTimerInterrupt+0x20>)
 800193e:	3b01      	subs	r3, #1
 8001940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <vPortSetupTimerInterrupt+0x24>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2000000c 	.word	0x2000000c
 8001950:	e000e014 	.word	0xe000e014
 8001954:	e000e010 	.word	0xe000e010

08001958 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001958:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <xPortStartScheduler+0xc8>)
 800195a:	4a32      	ldr	r2, [pc, #200]	; (8001a24 <xPortStartScheduler+0xcc>)
{
 800195c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	4291      	cmp	r1, r2
 8001962:	d108      	bne.n	8001976 <xPortStartScheduler+0x1e>
	__asm volatile
 8001964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001968:	f383 8811 	msr	BASEPRI, r3
 800196c:	f3bf 8f6f 	isb	sy
 8001970:	f3bf 8f4f 	dsb	sy
 8001974:	e7fe      	b.n	8001974 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <xPortStartScheduler+0xd0>)
 800197a:	429a      	cmp	r2, r3
 800197c:	d108      	bne.n	8001990 <xPortStartScheduler+0x38>
 800197e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001982:	f383 8811 	msr	BASEPRI, r3
 8001986:	f3bf 8f6f 	isb	sy
 800198a:	f3bf 8f4f 	dsb	sy
 800198e:	e7fe      	b.n	800198e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <xPortStartScheduler+0xd4>)
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001998:	22ff      	movs	r2, #255	; 0xff
 800199a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800199c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800199e:	4a24      	ldr	r2, [pc, #144]	; (8001a30 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80019a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80019aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019ae:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <xPortStartScheduler+0xdc>)
 80019b2:	2207      	movs	r2, #7
 80019b4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80019b6:	2100      	movs	r1, #0
 80019b8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80019bc:	0600      	lsls	r0, r0, #24
 80019be:	f102 34ff 	add.w	r4, r2, #4294967295
 80019c2:	d423      	bmi.n	8001a0c <xPortStartScheduler+0xb4>
 80019c4:	b101      	cbz	r1, 80019c8 <xPortStartScheduler+0x70>
 80019c6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80019cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80019d0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80019d2:	9b01      	ldr	r3, [sp, #4]
 80019d4:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <xPortStartScheduler+0xd4>)
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80019da:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <xPortStartScheduler+0xe0>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80019e2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80019ea:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80019ec:	f7ff ffa0 	bl	8001930 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <xPortStartScheduler+0xe4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80019f6:	f7ff fee7 	bl	80017c8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80019fa:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <xPortStartScheduler+0xe8>)
 80019fc:	6813      	ldr	r3, [r2, #0]
 80019fe:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001a02:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001a04:	f7ff fed0 	bl	80017a8 <prvPortStartFirstTask>
	prvTaskExitError();
 8001a08:	f7ff feb6 	bl	8001778 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001a0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001a10:	0052      	lsls	r2, r2, #1
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	f88d 2003 	strb.w	r2, [sp, #3]
 8001a18:	2101      	movs	r1, #1
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	e7cc      	b.n	80019b8 <xPortStartScheduler+0x60>
 8001a1e:	bf00      	nop
 8001a20:	e000ed00 	.word	0xe000ed00
 8001a24:	410fc271 	.word	0x410fc271
 8001a28:	410fc270 	.word	0x410fc270
 8001a2c:	e000e400 	.word	0xe000e400
 8001a30:	2000002c 	.word	0x2000002c
 8001a34:	20000030 	.word	0x20000030
 8001a38:	e000ed20 	.word	0xe000ed20
 8001a3c:	20000008 	.word	0x20000008
 8001a40:	e000ef34 	.word	0xe000ef34

08001a44 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001a44:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <prvInsertBlockIntoFreeList+0x40>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4282      	cmp	r2, r0
 8001a4c:	d318      	bcc.n	8001a80 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001a4e:	685c      	ldr	r4, [r3, #4]
 8001a50:	1919      	adds	r1, r3, r4
 8001a52:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001a54:	bf01      	itttt	eq
 8001a56:	6841      	ldreq	r1, [r0, #4]
 8001a58:	4618      	moveq	r0, r3
 8001a5a:	1909      	addeq	r1, r1, r4
 8001a5c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001a5e:	6844      	ldr	r4, [r0, #4]
 8001a60:	1901      	adds	r1, r0, r4
 8001a62:	428a      	cmp	r2, r1
 8001a64:	d107      	bne.n	8001a76 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <prvInsertBlockIntoFreeList+0x44>)
 8001a68:	6809      	ldr	r1, [r1, #0]
 8001a6a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a6c:	bf1f      	itttt	ne
 8001a6e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001a70:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001a72:	1909      	addne	r1, r1, r4
 8001a74:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001a76:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001a78:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001a7a:	bf18      	it	ne
 8001a7c:	6018      	strne	r0, [r3, #0]
 8001a7e:	bd10      	pop	{r4, pc}
 8001a80:	4613      	mov	r3, r2
 8001a82:	e7e1      	b.n	8001a48 <prvInsertBlockIntoFreeList+0x4>
 8001a84:	20003c44 	.word	0x20003c44
 8001a88:	20000034 	.word	0x20000034

08001a8c <pvPortMalloc>:
{
 8001a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a90:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001a92:	f000 fa25 	bl	8001ee0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001a96:	493e      	ldr	r1, [pc, #248]	; (8001b90 <pvPortMalloc+0x104>)
 8001a98:	4d3e      	ldr	r5, [pc, #248]	; (8001b94 <pvPortMalloc+0x108>)
 8001a9a:	680b      	ldr	r3, [r1, #0]
 8001a9c:	bb0b      	cbnz	r3, 8001ae2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001a9e:	4a3e      	ldr	r2, [pc, #248]	; (8001b98 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001aa0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001aa2:	bf1f      	itttt	ne
 8001aa4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001aa6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001aaa:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001aae:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ab0:	bf14      	ite	ne
 8001ab2:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001ab4:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001ab8:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001aba:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001abc:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001ac0:	4e36      	ldr	r6, [pc, #216]	; (8001b9c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001ac2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001ac8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001aca:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001acc:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001ace:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001ad0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001ad4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ad6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ad8:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <pvPortMalloc+0x118>)
 8001ada:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001adc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ae0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001ae2:	682f      	ldr	r7, [r5, #0]
 8001ae4:	4227      	tst	r7, r4
 8001ae6:	d116      	bne.n	8001b16 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001ae8:	2c00      	cmp	r4, #0
 8001aea:	d041      	beq.n	8001b70 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001aec:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001af0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001af2:	bf1c      	itt	ne
 8001af4:	f023 0307 	bicne.w	r3, r3, #7
 8001af8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001afa:	b163      	cbz	r3, 8001b16 <pvPortMalloc+0x8a>
 8001afc:	4a29      	ldr	r2, [pc, #164]	; (8001ba4 <pvPortMalloc+0x118>)
 8001afe:	6816      	ldr	r6, [r2, #0]
 8001b00:	42b3      	cmp	r3, r6
 8001b02:	4690      	mov	r8, r2
 8001b04:	d807      	bhi.n	8001b16 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001b06:	4a25      	ldr	r2, [pc, #148]	; (8001b9c <pvPortMalloc+0x110>)
 8001b08:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b0a:	6868      	ldr	r0, [r5, #4]
 8001b0c:	4283      	cmp	r3, r0
 8001b0e:	d804      	bhi.n	8001b1a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001b10:	6809      	ldr	r1, [r1, #0]
 8001b12:	428d      	cmp	r5, r1
 8001b14:	d107      	bne.n	8001b26 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001b16:	2400      	movs	r4, #0
 8001b18:	e02a      	b.n	8001b70 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001b1a:	682c      	ldr	r4, [r5, #0]
 8001b1c:	2c00      	cmp	r4, #0
 8001b1e:	d0f7      	beq.n	8001b10 <pvPortMalloc+0x84>
 8001b20:	462a      	mov	r2, r5
 8001b22:	4625      	mov	r5, r4
 8001b24:	e7f1      	b.n	8001b0a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001b26:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001b28:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001b2a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001b2c:	1ac2      	subs	r2, r0, r3
 8001b2e:	2a10      	cmp	r2, #16
 8001b30:	d90f      	bls.n	8001b52 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001b32:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b34:	0741      	lsls	r1, r0, #29
 8001b36:	d008      	beq.n	8001b4a <pvPortMalloc+0xbe>
 8001b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3c:	f383 8811 	msr	BASEPRI, r3
 8001b40:	f3bf 8f6f 	isb	sy
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	e7fe      	b.n	8001b48 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001b4a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001b4c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001b4e:	f7ff ff79 	bl	8001a44 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001b52:	4913      	ldr	r1, [pc, #76]	; (8001ba0 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001b54:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001b56:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001b58:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001b5a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001b5c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001b5e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001b62:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001b66:	bf38      	it	cc
 8001b68:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001b6a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001b6c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001b6e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001b70:	f000 fa50 	bl	8002014 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b74:	0763      	lsls	r3, r4, #29
 8001b76:	d008      	beq.n	8001b8a <pvPortMalloc+0xfe>
 8001b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7c:	f383 8811 	msr	BASEPRI, r3
 8001b80:	f3bf 8f6f 	isb	sy
 8001b84:	f3bf 8f4f 	dsb	sy
 8001b88:	e7fe      	b.n	8001b88 <pvPortMalloc+0xfc>
}
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b90:	20000034 	.word	0x20000034
 8001b94:	20003c38 	.word	0x20003c38
 8001b98:	20000038 	.word	0x20000038
 8001b9c:	20003c44 	.word	0x20003c44
 8001ba0:	20003c40 	.word	0x20003c40
 8001ba4:	20003c3c 	.word	0x20003c3c

08001ba8 <vPortFree>:
{
 8001ba8:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001baa:	4604      	mov	r4, r0
 8001bac:	b370      	cbz	r0, 8001c0c <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001bae:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <vPortFree+0x68>)
 8001bb0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	4213      	tst	r3, r2
 8001bb8:	d108      	bne.n	8001bcc <vPortFree+0x24>
 8001bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bbe:	f383 8811 	msr	BASEPRI, r3
 8001bc2:	f3bf 8f6f 	isb	sy
 8001bc6:	f3bf 8f4f 	dsb	sy
 8001bca:	e7fe      	b.n	8001bca <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001bcc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001bd0:	b141      	cbz	r1, 8001be4 <vPortFree+0x3c>
 8001bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd6:	f383 8811 	msr	BASEPRI, r3
 8001bda:	f3bf 8f6f 	isb	sy
 8001bde:	f3bf 8f4f 	dsb	sy
 8001be2:	e7fe      	b.n	8001be2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001be4:	ea23 0302 	bic.w	r3, r3, r2
 8001be8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001bec:	f000 f978 	bl	8001ee0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001bf0:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <vPortFree+0x6c>)
 8001bf2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001bf6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001bf8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001bfc:	440b      	add	r3, r1
 8001bfe:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001c00:	f7ff ff20 	bl	8001a44 <prvInsertBlockIntoFreeList>
}
 8001c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001c08:	f000 ba04 	b.w	8002014 <xTaskResumeAll>
 8001c0c:	bd10      	pop	{r4, pc}
 8001c0e:	bf00      	nop
 8001c10:	20003c38 	.word	0x20003c38
 8001c14:	20003c3c 	.word	0x20003c3c

08001c18 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <prvResetNextTaskUnblockTime+0x1c>)
 8001c1a:	6813      	ldr	r3, [r2, #0]
 8001c1c:	6819      	ldr	r1, [r3, #0]
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <prvResetNextTaskUnblockTime+0x20>)
 8001c20:	b919      	cbnz	r1, 8001c2a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c22:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c2e:	68d2      	ldr	r2, [r2, #12]
 8001c30:	6852      	ldr	r2, [r2, #4]
 8001c32:	e7f8      	b.n	8001c26 <prvResetNextTaskUnblockTime+0xe>
 8001c34:	20003c50 	.word	0x20003c50
 8001c38:	20003d28 	.word	0x20003d28

08001c3c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c40:	4e1b      	ldr	r6, [pc, #108]	; (8001cb0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001c42:	681d      	ldr	r5, [r3, #0]
{
 8001c44:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c46:	6830      	ldr	r0, [r6, #0]
 8001c48:	3004      	adds	r0, #4
{
 8001c4a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c4c:	f7ff fd84 	bl	8001758 <uxListRemove>
 8001c50:	4633      	mov	r3, r6
 8001c52:	b940      	cbnz	r0, 8001c66 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001c54:	6831      	ldr	r1, [r6, #0]
 8001c56:	4e17      	ldr	r6, [pc, #92]	; (8001cb4 <prvAddCurrentTaskToDelayedList+0x78>)
 8001c58:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001c5a:	6832      	ldr	r2, [r6, #0]
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	4088      	lsls	r0, r1
 8001c60:	ea22 0200 	bic.w	r2, r2, r0
 8001c64:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001c66:	1c62      	adds	r2, r4, #1
 8001c68:	d107      	bne.n	8001c7a <prvAddCurrentTaskToDelayedList+0x3e>
 8001c6a:	b137      	cbz	r7, 8001c7a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c6c:	6819      	ldr	r1, [r3, #0]
 8001c6e:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001c70:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001c72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c76:	f7ff bd4c 	b.w	8001712 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001c7a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c7c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001c7e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001c80:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001c82:	d907      	bls.n	8001c94 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c84:	4a0d      	ldr	r2, [pc, #52]	; (8001cbc <prvAddCurrentTaskToDelayedList+0x80>)
 8001c86:	6810      	ldr	r0, [r2, #0]
 8001c88:	6819      	ldr	r1, [r3, #0]
}
 8001c8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c8e:	3104      	adds	r1, #4
 8001c90:	f7ff bd4b 	b.w	800172a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <prvAddCurrentTaskToDelayedList+0x84>)
 8001c96:	6810      	ldr	r0, [r2, #0]
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	3104      	adds	r1, #4
 8001c9c:	f7ff fd45 	bl	800172a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <prvAddCurrentTaskToDelayedList+0x88>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001ca6:	bf38      	it	cc
 8001ca8:	601c      	strcc	r4, [r3, #0]
 8001caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cac:	20003d70 	.word	0x20003d70
 8001cb0:	20003c4c 	.word	0x20003c4c
 8001cb4:	20003cf8 	.word	0x20003cf8
 8001cb8:	20003d48 	.word	0x20003d48
 8001cbc:	20003c54 	.word	0x20003c54
 8001cc0:	20003c50 	.word	0x20003c50
 8001cc4:	20003d28 	.word	0x20003d28

08001cc8 <xTaskCreate>:
	{
 8001cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ccc:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001cd0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cd2:	4650      	mov	r0, sl
	{
 8001cd4:	460f      	mov	r7, r1
 8001cd6:	4699      	mov	r9, r3
 8001cd8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cda:	f7ff fed7 	bl	8001a8c <pvPortMalloc>
			if( pxStack != NULL )
 8001cde:	4605      	mov	r5, r0
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	f000 8096 	beq.w	8001e12 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001ce6:	2054      	movs	r0, #84	; 0x54
 8001ce8:	f7ff fed0 	bl	8001a8c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001cec:	4604      	mov	r4, r0
 8001cee:	2800      	cmp	r0, #0
 8001cf0:	f000 808c 	beq.w	8001e0c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001cf4:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001cf8:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001cfa:	4455      	add	r5, sl
 8001cfc:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001cfe:	f025 0a07 	bic.w	sl, r5, #7
 8001d02:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001d06:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d08:	7859      	ldrb	r1, [r3, #1]
 8001d0a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001d0e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001d12:	b109      	cbz	r1, 8001d18 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d14:	42bb      	cmp	r3, r7
 8001d16:	d1f7      	bne.n	8001d08 <xTaskCreate+0x40>
 8001d18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001d1a:	2d06      	cmp	r5, #6
 8001d1c:	bf28      	it	cs
 8001d1e:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d20:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d24:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001d26:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001d28:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d2a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d2c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001d30:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d34:	f7ff fcea 	bl	800170c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d38:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d3c:	f104 0018 	add.w	r0, r4, #24
 8001d40:	f7ff fce4 	bl	800170c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001d44:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d48:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d4a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d4c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d4e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d52:	464a      	mov	r2, r9
 8001d54:	4641      	mov	r1, r8
 8001d56:	4650      	mov	r0, sl
 8001d58:	f7ff fd40 	bl	80017dc <pxPortInitialiseStack>
 8001d5c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001d5e:	b106      	cbz	r6, 8001d62 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001d60:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001d62:	f7ff fd67 	bl	8001834 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001d66:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001d68:	4e32      	ldr	r6, [pc, #200]	; (8001e34 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001e60 <xTaskCreate+0x198>
 8001d70:	3201      	adds	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001d74:	6835      	ldr	r5, [r6, #0]
 8001d76:	2d00      	cmp	r5, #0
 8001d78:	d14e      	bne.n	8001e18 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001d7a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d11d      	bne.n	8001dbe <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d82:	eb08 0005 	add.w	r0, r8, r5
 8001d86:	3514      	adds	r5, #20
 8001d88:	f7ff fcb5 	bl	80016f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d8c:	2d8c      	cmp	r5, #140	; 0x8c
 8001d8e:	d1f8      	bne.n	8001d82 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001d90:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001e64 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001d94:	4d28      	ldr	r5, [pc, #160]	; (8001e38 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001d96:	4648      	mov	r0, r9
 8001d98:	f7ff fcad 	bl	80016f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	f7ff fcaa 	bl	80016f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001da2:	4826      	ldr	r0, [pc, #152]	; (8001e3c <xTaskCreate+0x174>)
 8001da4:	f7ff fca7 	bl	80016f6 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001da8:	4825      	ldr	r0, [pc, #148]	; (8001e40 <xTaskCreate+0x178>)
 8001daa:	f7ff fca4 	bl	80016f6 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001dae:	4825      	ldr	r0, [pc, #148]	; (8001e44 <xTaskCreate+0x17c>)
 8001db0:	f7ff fca1 	bl	80016f6 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001db4:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <xTaskCreate+0x180>)
 8001db6:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <xTaskCreate+0x184>)
 8001dbc:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001dbe:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001dc0:	4924      	ldr	r1, [pc, #144]	; (8001e54 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001dc2:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001dc4:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001dca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dcc:	2501      	movs	r5, #1
 8001dce:	fa05 f302 	lsl.w	r3, r5, r2
 8001dd2:	4303      	orrs	r3, r0
 8001dd4:	2014      	movs	r0, #20
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	fb00 8002 	mla	r0, r0, r2, r8
 8001ddc:	4639      	mov	r1, r7
 8001dde:	f7ff fc98 	bl	8001712 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001de2:	f7ff fd49 	bl	8001878 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001de6:	4b1c      	ldr	r3, [pc, #112]	; (8001e58 <xTaskCreate+0x190>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	b163      	cbz	r3, 8001e06 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001dec:	6833      	ldr	r3, [r6, #0]
 8001dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d207      	bcs.n	8001e06 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <xTaskCreate+0x194>)
 8001df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f3bf 8f4f 	dsb	sy
 8001e02:	f3bf 8f6f 	isb	sy
	}
 8001e06:	4628      	mov	r0, r5
 8001e08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f7ff fecb 	bl	8001ba8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001e12:	f04f 35ff 	mov.w	r5, #4294967295
 8001e16:	e7f6      	b.n	8001e06 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <xTaskCreate+0x190>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ce      	bne.n	8001dbe <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e20:	6833      	ldr	r3, [r6, #0]
 8001e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e26:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001e28:	bf98      	it	ls
 8001e2a:	6034      	strls	r4, [r6, #0]
 8001e2c:	e7c7      	b.n	8001dbe <xTaskCreate+0xf6>
 8001e2e:	bf00      	nop
 8001e30:	20003ce4 	.word	0x20003ce4
 8001e34:	20003c4c 	.word	0x20003c4c
 8001e38:	20003d10 	.word	0x20003d10
 8001e3c:	20003d30 	.word	0x20003d30
 8001e40:	20003d5c 	.word	0x20003d5c
 8001e44:	20003d48 	.word	0x20003d48
 8001e48:	20003c50 	.word	0x20003c50
 8001e4c:	20003c54 	.word	0x20003c54
 8001e50:	20003cf4 	.word	0x20003cf4
 8001e54:	20003cf8 	.word	0x20003cf8
 8001e58:	20003d44 	.word	0x20003d44
 8001e5c:	e000ed04 	.word	0xe000ed04
 8001e60:	20003c58 	.word	0x20003c58
 8001e64:	20003cfc 	.word	0x20003cfc

08001e68 <vTaskStartScheduler>:
{
 8001e68:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <vTaskStartScheduler+0x60>)
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	2400      	movs	r4, #0
 8001e70:	9400      	str	r4, [sp, #0]
 8001e72:	4623      	mov	r3, r4
 8001e74:	2280      	movs	r2, #128	; 0x80
 8001e76:	4915      	ldr	r1, [pc, #84]	; (8001ecc <vTaskStartScheduler+0x64>)
 8001e78:	4815      	ldr	r0, [pc, #84]	; (8001ed0 <vTaskStartScheduler+0x68>)
 8001e7a:	f7ff ff25 	bl	8001cc8 <xTaskCreate>
	if( xReturn == pdPASS )
 8001e7e:	2801      	cmp	r0, #1
 8001e80:	d114      	bne.n	8001eac <vTaskStartScheduler+0x44>
 8001e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e86:	f383 8811 	msr	BASEPRI, r3
 8001e8a:	f3bf 8f6f 	isb	sy
 8001e8e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <vTaskStartScheduler+0x6c>)
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <vTaskStartScheduler+0x70>)
 8001e9c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <vTaskStartScheduler+0x74>)
 8001ea0:	601c      	str	r4, [r3, #0]
}
 8001ea2:	b002      	add	sp, #8
 8001ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001ea8:	f7ff bd56 	b.w	8001958 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001eac:	3001      	adds	r0, #1
 8001eae:	d108      	bne.n	8001ec2 <vTaskStartScheduler+0x5a>
 8001eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eb4:	f383 8811 	msr	BASEPRI, r3
 8001eb8:	f3bf 8f6f 	isb	sy
 8001ebc:	f3bf 8f4f 	dsb	sy
 8001ec0:	e7fe      	b.n	8001ec0 <vTaskStartScheduler+0x58>
}
 8001ec2:	b002      	add	sp, #8
 8001ec4:	bd10      	pop	{r4, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20003d24 	.word	0x20003d24
 8001ecc:	080028f8 	.word	0x080028f8
 8001ed0:	0800214d 	.word	0x0800214d
 8001ed4:	20003d28 	.word	0x20003d28
 8001ed8:	20003d44 	.word	0x20003d44
 8001edc:	20003d70 	.word	0x20003d70

08001ee0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001ee0:	4a02      	ldr	r2, [pc, #8]	; (8001eec <vTaskSuspendAll+0xc>)
 8001ee2:	6813      	ldr	r3, [r2, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20003cf0 	.word	0x20003cf0

08001ef0 <xTaskIncrementTick>:
{
 8001ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ef4:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <xTaskIncrementTick+0xf8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d153      	bne.n	8001fa4 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001efc:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <xTaskIncrementTick+0xfc>)
 8001efe:	681c      	ldr	r4, [r3, #0]
 8001f00:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001f02:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001f04:	b9bc      	cbnz	r4, 8001f36 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001f06:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <xTaskIncrementTick+0x100>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	b142      	cbz	r2, 8001f20 <xTaskIncrementTick+0x30>
 8001f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f12:	f383 8811 	msr	BASEPRI, r3
 8001f16:	f3bf 8f6f 	isb	sy
 8001f1a:	f3bf 8f4f 	dsb	sy
 8001f1e:	e7fe      	b.n	8001f1e <xTaskIncrementTick+0x2e>
 8001f20:	4a34      	ldr	r2, [pc, #208]	; (8001ff4 <xTaskIncrementTick+0x104>)
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	6810      	ldr	r0, [r2, #0]
 8001f26:	6018      	str	r0, [r3, #0]
 8001f28:	6011      	str	r1, [r2, #0]
 8001f2a:	4a33      	ldr	r2, [pc, #204]	; (8001ff8 <xTaskIncrementTick+0x108>)
 8001f2c:	6813      	ldr	r3, [r2, #0]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	f7ff fe71 	bl	8001c18 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001f36:	4d31      	ldr	r5, [pc, #196]	; (8001ffc <xTaskIncrementTick+0x10c>)
 8001f38:	4f31      	ldr	r7, [pc, #196]	; (8002000 <xTaskIncrementTick+0x110>)
 8001f3a:	682b      	ldr	r3, [r5, #0]
 8001f3c:	429c      	cmp	r4, r3
 8001f3e:	f04f 0b00 	mov.w	fp, #0
 8001f42:	d33e      	bcc.n	8001fc2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f44:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001ff0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001f48:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002010 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f4c:	f8d8 2000 	ldr.w	r2, [r8]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	bb72      	cbnz	r2, 8001fb2 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	602a      	str	r2, [r5, #0]
					break;
 8001f5a:	e032      	b.n	8001fc2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f5c:	f106 0a04 	add.w	sl, r6, #4
 8001f60:	4650      	mov	r0, sl
 8001f62:	f7ff fbf9 	bl	8001758 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f66:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001f68:	b119      	cbz	r1, 8001f72 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f6a:	f106 0018 	add.w	r0, r6, #24
 8001f6e:	f7ff fbf3 	bl	8001758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f72:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001f74:	f8d9 3000 	ldr.w	r3, [r9]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	fa02 f100 	lsl.w	r1, r2, r0
 8001f7e:	4319      	orrs	r1, r3
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <xTaskIncrementTick+0x114>)
 8001f82:	f8c9 1000 	str.w	r1, [r9]
 8001f86:	f04f 0e14 	mov.w	lr, #20
 8001f8a:	4651      	mov	r1, sl
 8001f8c:	fb0e 3000 	mla	r0, lr, r0, r3
 8001f90:	f7ff fbbf 	bl	8001712 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f94:	6838      	ldr	r0, [r7, #0]
 8001f96:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001f98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001f9a:	4291      	cmp	r1, r2
 8001f9c:	bf28      	it	cs
 8001f9e:	f04f 0b01 	movcs.w	fp, #1
 8001fa2:	e7d3      	b.n	8001f4c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001fa4:	4a18      	ldr	r2, [pc, #96]	; (8002008 <xTaskIncrementTick+0x118>)
 8001fa6:	6813      	ldr	r3, [r2, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001fac:	f04f 0b00 	mov.w	fp, #0
 8001fb0:	e011      	b.n	8001fd6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fb2:	f8d8 2000 	ldr.w	r2, [r8]
 8001fb6:	68d2      	ldr	r2, [r2, #12]
 8001fb8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001fba:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001fbc:	428c      	cmp	r4, r1
 8001fbe:	d2cd      	bcs.n	8001f5c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001fc0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <xTaskIncrementTick+0x114>)
 8001fc6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fc8:	2214      	movs	r2, #20
 8001fca:	434a      	muls	r2, r1
 8001fcc:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001fce:	2a02      	cmp	r2, #2
 8001fd0:	bf28      	it	cs
 8001fd2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001fd6:	4a0d      	ldr	r2, [pc, #52]	; (800200c <xTaskIncrementTick+0x11c>)
 8001fd8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001fda:	2a00      	cmp	r2, #0
 8001fdc:	bf18      	it	ne
 8001fde:	f04f 0b01 	movne.w	fp, #1
}
 8001fe2:	4658      	mov	r0, fp
 8001fe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fe8:	20003cf0 	.word	0x20003cf0
 8001fec:	20003d70 	.word	0x20003d70
 8001ff0:	20003c50 	.word	0x20003c50
 8001ff4:	20003c54 	.word	0x20003c54
 8001ff8:	20003d2c 	.word	0x20003d2c
 8001ffc:	20003d28 	.word	0x20003d28
 8002000:	20003c4c 	.word	0x20003c4c
 8002004:	20003c58 	.word	0x20003c58
 8002008:	20003cec 	.word	0x20003cec
 800200c:	20003d74 	.word	0x20003d74
 8002010:	20003cf8 	.word	0x20003cf8

08002014 <xTaskResumeAll>:
{
 8002014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002018:	4c31      	ldr	r4, [pc, #196]	; (80020e0 <xTaskResumeAll+0xcc>)
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	b943      	cbnz	r3, 8002030 <xTaskResumeAll+0x1c>
 800201e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002022:	f383 8811 	msr	BASEPRI, r3
 8002026:	f3bf 8f6f 	isb	sy
 800202a:	f3bf 8f4f 	dsb	sy
 800202e:	e7fe      	b.n	800202e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002030:	f7ff fc00 	bl	8001834 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	3b01      	subs	r3, #1
 8002038:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800203a:	6824      	ldr	r4, [r4, #0]
 800203c:	b12c      	cbz	r4, 800204a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800203e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002040:	f7ff fc1a 	bl	8001878 <vPortExitCritical>
}
 8002044:	4620      	mov	r0, r4
 8002046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <xTaskResumeAll+0xd0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f5      	beq.n	800203e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002052:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80020fc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002056:	4f24      	ldr	r7, [pc, #144]	; (80020e8 <xTaskResumeAll+0xd4>)
 8002058:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002100 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800205c:	f8d9 3000 	ldr.w	r3, [r9]
 8002060:	b9e3      	cbnz	r3, 800209c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002062:	b10c      	cbz	r4, 8002068 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002064:	f7ff fdd8 	bl	8001c18 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002068:	4d20      	ldr	r5, [pc, #128]	; (80020ec <xTaskResumeAll+0xd8>)
 800206a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800206c:	b144      	cbz	r4, 8002080 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800206e:	4e20      	ldr	r6, [pc, #128]	; (80020f0 <xTaskResumeAll+0xdc>)
 8002070:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002072:	f7ff ff3d 	bl	8001ef0 <xTaskIncrementTick>
 8002076:	b100      	cbz	r0, 800207a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002078:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800207a:	3c01      	subs	r4, #1
 800207c:	d1f9      	bne.n	8002072 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800207e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <xTaskResumeAll+0xdc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0da      	beq.n	800203e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002088:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <xTaskResumeAll+0xe0>)
 800208a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002098:	2401      	movs	r4, #1
 800209a:	e7d1      	b.n	8002040 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800209c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80020a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020a2:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80020a4:	f104 0018 	add.w	r0, r4, #24
 80020a8:	f7ff fb56 	bl	8001758 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020ac:	4630      	mov	r0, r6
 80020ae:	f7ff fb53 	bl	8001758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80020b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80020b4:	6839      	ldr	r1, [r7, #0]
 80020b6:	2501      	movs	r5, #1
 80020b8:	fa05 f302 	lsl.w	r3, r5, r2
 80020bc:	2014      	movs	r0, #20
 80020be:	430b      	orrs	r3, r1
 80020c0:	fb00 8002 	mla	r0, r0, r2, r8
 80020c4:	4631      	mov	r1, r6
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	f7ff fb23 	bl	8001712 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <xTaskResumeAll+0xe4>)
 80020ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80020d6:	bf24      	itt	cs
 80020d8:	4b05      	ldrcs	r3, [pc, #20]	; (80020f0 <xTaskResumeAll+0xdc>)
 80020da:	601d      	strcs	r5, [r3, #0]
 80020dc:	e7be      	b.n	800205c <xTaskResumeAll+0x48>
 80020de:	bf00      	nop
 80020e0:	20003cf0 	.word	0x20003cf0
 80020e4:	20003ce4 	.word	0x20003ce4
 80020e8:	20003cf8 	.word	0x20003cf8
 80020ec:	20003cec 	.word	0x20003cec
 80020f0:	20003d74 	.word	0x20003d74
 80020f4:	e000ed04 	.word	0xe000ed04
 80020f8:	20003c4c 	.word	0x20003c4c
 80020fc:	20003d30 	.word	0x20003d30
 8002100:	20003c58 	.word	0x20003c58

08002104 <vTaskDelay>:
	{
 8002104:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002106:	b940      	cbnz	r0, 800211a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002108:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <vTaskDelay+0x40>)
 800210a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <vTaskDelay+0x44>)
 800211c:	6819      	ldr	r1, [r3, #0]
 800211e:	b141      	cbz	r1, 8002132 <vTaskDelay+0x2e>
 8002120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002124:	f383 8811 	msr	BASEPRI, r3
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	f3bf 8f4f 	dsb	sy
 8002130:	e7fe      	b.n	8002130 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002132:	f7ff fed5 	bl	8001ee0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002136:	f7ff fd81 	bl	8001c3c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800213a:	f7ff ff6b 	bl	8002014 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800213e:	2800      	cmp	r0, #0
 8002140:	d0e2      	beq.n	8002108 <vTaskDelay+0x4>
 8002142:	bd08      	pop	{r3, pc}
 8002144:	e000ed04 	.word	0xe000ed04
 8002148:	20003cf0 	.word	0x20003cf0

0800214c <prvIdleTask>:
{
 800214c:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800214e:	4e17      	ldr	r6, [pc, #92]	; (80021ac <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002150:	4c17      	ldr	r4, [pc, #92]	; (80021b0 <prvIdleTask+0x64>)
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	b963      	cbnz	r3, 8002170 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <prvIdleTask+0x68>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d9f8      	bls.n	8002150 <prvIdleTask+0x4>
				taskYIELD();
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <prvIdleTask+0x6c>)
 8002160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	f3bf 8f6f 	isb	sy
 800216e:	e7ef      	b.n	8002150 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002170:	f7ff feb6 	bl	8001ee0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002174:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002176:	f7ff ff4d 	bl	8002014 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800217a:	2d00      	cmp	r5, #0
 800217c:	d0e9      	beq.n	8002152 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800217e:	f7ff fb59 	bl	8001834 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002182:	68f3      	ldr	r3, [r6, #12]
 8002184:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002186:	1d28      	adds	r0, r5, #4
 8002188:	f7ff fae6 	bl	8001758 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800218c:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <prvIdleTask+0x70>)
 800218e:	6813      	ldr	r3, [r2, #0]
 8002190:	3b01      	subs	r3, #1
 8002192:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	3b01      	subs	r3, #1
 8002198:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800219a:	f7ff fb6d 	bl	8001878 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800219e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80021a0:	f7ff fd02 	bl	8001ba8 <vPortFree>
			vPortFree( pxTCB );
 80021a4:	4628      	mov	r0, r5
 80021a6:	f7ff fcff 	bl	8001ba8 <vPortFree>
 80021aa:	e7d2      	b.n	8002152 <prvIdleTask+0x6>
 80021ac:	20003d5c 	.word	0x20003d5c
 80021b0:	20003ce8 	.word	0x20003ce8
 80021b4:	20003c58 	.word	0x20003c58
 80021b8:	e000ed04 	.word	0xe000ed04
 80021bc:	20003ce4 	.word	0x20003ce4

080021c0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <vTaskSwitchContext+0x60>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <vTaskSwitchContext+0x64>)
{
 80021c6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021c8:	b112      	cbz	r2, 80021d0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80021ca:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80021d0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <vTaskSwitchContext+0x68>)
 80021d4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f1c3 031f 	rsb	r3, r3, #31
 80021e0:	2214      	movs	r2, #20
 80021e2:	4912      	ldr	r1, [pc, #72]	; (800222c <vTaskSwitchContext+0x6c>)
 80021e4:	435a      	muls	r2, r3
 80021e6:	1888      	adds	r0, r1, r2
 80021e8:	588c      	ldr	r4, [r1, r2]
 80021ea:	b944      	cbnz	r4, 80021fe <vTaskSwitchContext+0x3e>
	__asm volatile
 80021ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f0:	f383 8811 	msr	BASEPRI, r3
 80021f4:	f3bf 8f6f 	isb	sy
 80021f8:	f3bf 8f4f 	dsb	sy
 80021fc:	e7fe      	b.n	80021fc <vTaskSwitchContext+0x3c>
 80021fe:	6844      	ldr	r4, [r0, #4]
 8002200:	3208      	adds	r2, #8
 8002202:	6864      	ldr	r4, [r4, #4]
 8002204:	6044      	str	r4, [r0, #4]
 8002206:	440a      	add	r2, r1
 8002208:	4294      	cmp	r4, r2
 800220a:	bf04      	itt	eq
 800220c:	6862      	ldreq	r2, [r4, #4]
 800220e:	6042      	streq	r2, [r0, #4]
 8002210:	2214      	movs	r2, #20
 8002212:	fb02 1303 	mla	r3, r2, r3, r1
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <vTaskSwitchContext+0x70>)
 800221c:	e7d6      	b.n	80021cc <vTaskSwitchContext+0xc>
 800221e:	bf00      	nop
 8002220:	20003cf0 	.word	0x20003cf0
 8002224:	20003d74 	.word	0x20003d74
 8002228:	20003cf8 	.word	0x20003cf8
 800222c:	20003c58 	.word	0x20003c58
 8002230:	20003c4c 	.word	0x20003c4c

08002234 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002234:	4b05      	ldr	r3, [pc, #20]	; (800224c <xTaskGetSchedulerState+0x18>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b133      	cbz	r3, 8002248 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <xTaskGetSchedulerState+0x1c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002240:	bf0c      	ite	eq
 8002242:	2002      	moveq	r0, #2
 8002244:	2000      	movne	r0, #0
 8002246:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002248:	2001      	movs	r0, #1
	}
 800224a:	4770      	bx	lr
 800224c:	20003d44 	.word	0x20003d44
 8002250:	20003cf0 	.word	0x20003cf0

08002254 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* USER CODE BEGIN 5 */
	HAL_TIM_PWM_Start(&htim11,TIM_CHANNEL_1);
 8002258:	2100      	movs	r1, #0
 800225a:	4820      	ldr	r0, [pc, #128]	; (80022dc <StartDefaultTask+0x88>)
		if (i == 2000) {
			i = 0;
//			HAL_GPIO_WritePin(FlashOn_GPIO_Port, FlashOn_Pin, 1);
		}
		if ((i == 50) | (i == timestamp)) {
			HAL_GPIO_WritePin(FlashOn_GPIO_Port, FlashOn_Pin, 0);
 800225c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80022e4 <StartDefaultTask+0x90>

		}
		if(!syncSensed & (HAL_GPIO_ReadPin(Sync_GPIO_Port, Sync_Pin) == 1)) {
 8002260:	4f1f      	ldr	r7, [pc, #124]	; (80022e0 <StartDefaultTask+0x8c>)
	HAL_TIM_PWM_Start(&htim11,TIM_CHANNEL_1);
 8002262:	f7ff f8bb 	bl	80013dc <HAL_TIM_PWM_Start>
	char syncSensed = 0;
 8002266:	2500      	movs	r5, #0
	int i = 0, timestamp = 1001;
 8002268:	f240 36e9 	movw	r6, #1001	; 0x3e9
 800226c:	462c      	mov	r4, r5
		i++;
 800226e:	3401      	adds	r4, #1
			i = 0;
 8002270:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 8002274:	bf08      	it	eq
 8002276:	2400      	moveq	r4, #0
		if ((i == 50) | (i == timestamp)) {
 8002278:	2c32      	cmp	r4, #50	; 0x32
 800227a:	d001      	beq.n	8002280 <StartDefaultTask+0x2c>
 800227c:	42b4      	cmp	r4, r6
 800227e:	d104      	bne.n	800228a <StartDefaultTask+0x36>
			HAL_GPIO_WritePin(FlashOn_GPIO_Port, FlashOn_Pin, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	4640      	mov	r0, r8
 8002286:	f7fe fca9 	bl	8000bdc <HAL_GPIO_WritePin>
		if(!syncSensed & (HAL_GPIO_ReadPin(Sync_GPIO_Port, Sync_Pin) == 1)) {
 800228a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800228e:	4638      	mov	r0, r7
 8002290:	f7fe fc9e 	bl	8000bd0 <HAL_GPIO_ReadPin>
 8002294:	07eb      	lsls	r3, r5, #31
 8002296:	d40f      	bmi.n	80022b8 <StartDefaultTask+0x64>
 8002298:	2801      	cmp	r0, #1
 800229a:	d10d      	bne.n	80022b8 <StartDefaultTask+0x64>
			HAL_GPIO_WritePin(FlashOn_GPIO_Port, FlashOn_Pin, 1);
 800229c:	2201      	movs	r2, #1
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	4640      	mov	r0, r8
 80022a2:	f7fe fc9b 	bl	8000bdc <HAL_GPIO_WritePin>
			timestamp = (i + 25) % 2000;
 80022a6:	f104 0219 	add.w	r2, r4, #25
 80022aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
			syncSensed = 1;
 80022ae:	2501      	movs	r5, #1
			timestamp = (i + 25) % 2000;
 80022b0:	fb92 f6f3 	sdiv	r6, r2, r3
 80022b4:	fb03 2616 	mls	r6, r3, r6, r2
		}
		if(syncSensed & (HAL_GPIO_ReadPin(Sync_GPIO_Port, Sync_Pin) == 0)) {
 80022b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022bc:	4638      	mov	r0, r7
 80022be:	f7fe fc87 	bl	8000bd0 <HAL_GPIO_ReadPin>
 80022c2:	2800      	cmp	r0, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2000      	movne	r0, #0
 80022c8:	f005 0001 	andeq.w	r0, r5, #1
			syncSensed = 0;
 80022cc:	2800      	cmp	r0, #0
		}
		osDelay(1);
 80022ce:	f04f 0001 	mov.w	r0, #1
			syncSensed = 0;
 80022d2:	bf18      	it	ne
 80022d4:	2500      	movne	r5, #0
		osDelay(1);
 80022d6:	f7ff f9fc 	bl	80016d2 <osDelay>
		i++;
 80022da:	e7c8      	b.n	800226e <StartDefaultTask+0x1a>
 80022dc:	20003dc8 	.word	0x20003dc8
 80022e0:	40020000 	.word	0x40020000
 80022e4:	40020400 	.word	0x40020400

080022e8 <adjustPWM>:
	uint32_t arr = htim11.Instance->ARR;// - (uint32_t) (control / 8);
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <adjustPWM+0x2c>)
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	uint32_t ccr1 = (uint32_t) (htim11.Instance->CCR1 + control);
 80022ee:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 80022f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
	if(ccr1 > (arr >> 1)) {ccr1 = arr >> 1;}
 80022f6:	085b      	lsrs	r3, r3, #1
	uint32_t ccr1 = (uint32_t) (htim11.Instance->CCR1 + control);
 80022f8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80022fc:	2bc8      	cmp	r3, #200	; 0xc8
 80022fe:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8002302:	bf28      	it	cs
 8002304:	23c8      	movcs	r3, #200	; 0xc8
 8002306:	ee10 2a10 	vmov	r2, s0
 800230a:	4293      	cmp	r3, r2
 800230c:	bf28      	it	cs
 800230e:	4613      	movcs	r3, r2
	htim11.Instance->CCR1 = (uint32_t) ccr1;//Pulse length
 8002310:	634b      	str	r3, [r1, #52]	; 0x34
 8002312:	4770      	bx	lr
 8002314:	20003dc8 	.word	0x20003dc8

08002318 <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8002318:	b510      	push	{r4, lr}
	const float ki = 0.0;
	const float kd = 0.0;
	/* Infinite loop */
	for(ever)
	{
		HAL_ADC_Start(&hadc1);
 800231a:	4c0f      	ldr	r4, [pc, #60]	; (8002358 <StartTask02+0x40>)
{
 800231c:	ed2d 8b02 	vpush	{d8}
		{
			ADCValue = HAL_ADC_GetValue(&hadc1);
			errVal = setPoint - ADCValue;
			integral += errVal;
			derivative = errVal - lastError;
			control = kp * errVal;// + ki * integral + kd * derivative);
 8002320:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
		HAL_ADC_Start(&hadc1);
 8002324:	480c      	ldr	r0, [pc, #48]	; (8002358 <StartTask02+0x40>)
 8002326:	f7fe f9d7 	bl	80006d8 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1) == HAL_OK)
 800232a:	2101      	movs	r1, #1
 800232c:	480a      	ldr	r0, [pc, #40]	; (8002358 <StartTask02+0x40>)
 800232e:	f7fe fa33 	bl	8000798 <HAL_ADC_PollForConversion>
 8002332:	b960      	cbnz	r0, 800234e <StartTask02+0x36>
			ADCValue = HAL_ADC_GetValue(&hadc1);
 8002334:	4620      	mov	r0, r4
 8002336:	f7fe fa7f 	bl	8000838 <HAL_ADC_GetValue>
			errVal = setPoint - ADCValue;
 800233a:	f5c0 60fa 	rsb	r0, r0, #2000	; 0x7d0
			control = kp * errVal;// + ki * integral + kd * derivative);
 800233e:	ee07 0a90 	vmov	s15, r0
 8002342:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
			adjustPWM(control);
 8002346:	ee20 0a08 	vmul.f32	s0, s0, s16
 800234a:	f7ff ffcd 	bl	80022e8 <adjustPWM>
			lastError = errVal;

//			sprintf(str, "%ld, %ld\n", ADCValue, (int32_t) control);//, errVal, integral, derivative);
//			HAL_UART_Transmit(&huart2, (uint8_t*)str, 16, 1);
		}
		osDelay(100);
 800234e:	2064      	movs	r0, #100	; 0x64
 8002350:	f7ff f9bf 	bl	80016d2 <osDelay>
		HAL_ADC_Start(&hadc1);
 8002354:	e7e6      	b.n	8002324 <StartTask02+0xc>
 8002356:	bf00      	nop
 8002358:	20003d80 	.word	0x20003d80

0800235c <SystemClock_Config>:
{
 800235c:	b510      	push	{r4, lr}
 800235e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002360:	2230      	movs	r2, #48	; 0x30
 8002362:	2100      	movs	r1, #0
 8002364:	a808      	add	r0, sp, #32
 8002366:	f000 fa9f 	bl	80028a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800236a:	2214      	movs	r2, #20
 800236c:	2100      	movs	r1, #0
 800236e:	a803      	add	r0, sp, #12
 8002370:	f000 fa9a 	bl	80028a8 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	2200      	movs	r2, #0
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <SystemClock_Config+0x94>)
 8002378:	9201      	str	r2, [sp, #4]
 800237a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800237c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002380:	6419      	str	r1, [r3, #64]	; 0x40
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002384:	491b      	ldr	r1, [pc, #108]	; (80023f4 <SystemClock_Config+0x98>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800238e:	9202      	str	r2, [sp, #8]
 8002390:	680b      	ldr	r3, [r1, #0]
 8002392:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239a:	600b      	str	r3, [r1, #0]
 800239c:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800239e:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80023a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a8:	2301      	movs	r3, #1
 80023aa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023ac:	2310      	movs	r3, #16
 80023ae:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 80023b0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023b2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80023b6:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80023b8:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023ba:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80023bc:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023be:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023c0:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023c2:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023c6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c8:	f7fe fc0e 	bl	8000be8 <HAL_RCC_OscConfig>
 80023cc:	b100      	cbz	r0, 80023d0 <SystemClock_Config+0x74>
 80023ce:	e7fe      	b.n	80023ce <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023d0:	230f      	movs	r3, #15
 80023d2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d4:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023da:	9007      	str	r0, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023dc:	4621      	mov	r1, r4
 80023de:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e0:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023e2:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023e4:	f7fe fdb0 	bl	8000f48 <HAL_RCC_ClockConfig>
 80023e8:	b100      	cbz	r0, 80023ec <SystemClock_Config+0x90>
 80023ea:	e7fe      	b.n	80023ea <SystemClock_Config+0x8e>
}
 80023ec:	b014      	add	sp, #80	; 0x50
 80023ee:	bd10      	pop	{r4, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40007000 	.word	0x40007000

080023f8 <main>:
{
 80023f8:	b500      	push	{lr}
 80023fa:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80023fc:	f7fe f89c 	bl	8000538 <HAL_Init>
  SystemClock_Config();
 8002400:	f7ff ffac 	bl	800235c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	2214      	movs	r2, #20
 8002406:	2100      	movs	r1, #0
 8002408:	a809      	add	r0, sp, #36	; 0x24
 800240a:	f000 fa4d 	bl	80028a8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800240e:	2400      	movs	r4, #0
 8002410:	4b72      	ldr	r3, [pc, #456]	; (80025dc <main+0x1e4>)
 8002412:	9400      	str	r4, [sp, #0]
 8002414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002416:	4872      	ldr	r0, [pc, #456]	; (80025e0 <main+0x1e8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002418:	f042 0204 	orr.w	r2, r2, #4
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
 800241e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002420:	f002 0204 	and.w	r2, r2, #4
 8002424:	9200      	str	r2, [sp, #0]
 8002426:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002428:	9401      	str	r4, [sp, #4]
 800242a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800242c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
 8002432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002434:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002438:	9201      	str	r2, [sp, #4]
 800243a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	9402      	str	r4, [sp, #8]
 800243e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002440:	f042 0201 	orr.w	r2, r2, #1
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
 8002446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002448:	f002 0201 	and.w	r2, r2, #1
 800244c:	9202      	str	r2, [sp, #8]
 800244e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	9403      	str	r4, [sp, #12]
 8002452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002454:	f042 0202 	orr.w	r2, r2, #2
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002462:	4622      	mov	r2, r4
 8002464:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002468:	f7fe fbb8 	bl	8000bdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TogglePin_GPIO_Port, TogglePin_Pin, GPIO_PIN_RESET);
 800246c:	4622      	mov	r2, r4
 800246e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002472:	485c      	ldr	r0, [pc, #368]	; (80025e4 <main+0x1ec>)
 8002474:	f7fe fbb2 	bl	8000bdc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FlashOn_GPIO_Port, FlashOn_Pin, GPIO_PIN_RESET);
 8002478:	4622      	mov	r2, r4
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	485a      	ldr	r0, [pc, #360]	; (80025e8 <main+0x1f0>)
 800247e:	f7fe fbad 	bl	8000bdc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002482:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002486:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002488:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800248a:	4b58      	ldr	r3, [pc, #352]	; (80025ec <main+0x1f4>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800248c:	4855      	ldr	r0, [pc, #340]	; (80025e4 <main+0x1ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800248e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002490:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002494:	f7fe fac6 	bl	8000a24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8002498:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800249a:	a909      	add	r1, sp, #36	; 0x24
 800249c:	4850      	ldr	r0, [pc, #320]	; (80025e0 <main+0x1e8>)
  GPIO_InitStruct.Pin = LD2_Pin;
 800249e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80024a6:	f7fe fabd 	bl	8000a24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TogglePin_Pin;
 80024aa:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(TogglePin_GPIO_Port, &GPIO_InitStruct);
 80024ae:	a909      	add	r1, sp, #36	; 0x24
 80024b0:	484c      	ldr	r0, [pc, #304]	; (80025e4 <main+0x1ec>)
  GPIO_InitStruct.Pin = TogglePin_Pin;
 80024b2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b4:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(TogglePin_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f7fe fab3 	bl	8000a24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Sync_Pin;
 80024be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(Sync_GPIO_Port, &GPIO_InitStruct);
 80024c2:	a909      	add	r1, sp, #36	; 0x24
 80024c4:	4846      	ldr	r0, [pc, #280]	; (80025e0 <main+0x1e8>)
  GPIO_InitStruct.Pin = Sync_Pin;
 80024c6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(Sync_GPIO_Port, &GPIO_InitStruct);
 80024cc:	f7fe faaa 	bl	8000a24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FlashOn_Pin;
 80024d0:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(FlashOn_GPIO_Port, &GPIO_InitStruct);
 80024d2:	a909      	add	r1, sp, #36	; 0x24
 80024d4:	4844      	ldr	r0, [pc, #272]	; (80025e8 <main+0x1f0>)
  GPIO_InitStruct.Pin = FlashOn_Pin;
 80024d6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(FlashOn_GPIO_Port, &GPIO_InitStruct);
 80024de:	f7fe faa1 	bl	8000a24 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80024e2:	4843      	ldr	r0, [pc, #268]	; (80025f0 <main+0x1f8>)
  huart2.Init.BaudRate = 115200;
 80024e4:	4b43      	ldr	r3, [pc, #268]	; (80025f4 <main+0x1fc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024e6:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80024e8:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 80024ec:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024f0:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024f2:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024f4:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024f6:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f8:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024fa:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024fc:	f7ff f89e 	bl	800163c <HAL_UART_Init>
 8002500:	4606      	mov	r6, r0
 8002502:	b100      	cbz	r0, 8002506 <main+0x10e>
 8002504:	e7fe      	b.n	8002504 <main+0x10c>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002506:	4601      	mov	r1, r0
 8002508:	2210      	movs	r2, #16
 800250a:	a809      	add	r0, sp, #36	; 0x24
 800250c:	f000 f9cc 	bl	80028a8 <memset>
  hadc1.Instance = ADC1;
 8002510:	4c39      	ldr	r4, [pc, #228]	; (80025f8 <main+0x200>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002512:	493a      	ldr	r1, [pc, #232]	; (80025fc <main+0x204>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002514:	60a6      	str	r6, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002516:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800251a:	e884 000a 	stmia.w	r4, {r1, r3}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800251e:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002520:	4b37      	ldr	r3, [pc, #220]	; (8002600 <main+0x208>)
  hadc1.Init.ScanConvMode = ENABLE;
 8002522:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002524:	61a5      	str	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002526:	6226      	str	r6, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002528:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800252a:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800252c:	60e6      	str	r6, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 800252e:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002530:	6326      	str	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002532:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002534:	f7fe f82c 	bl	8000590 <HAL_ADC_Init>
 8002538:	b100      	cbz	r0, 800253c <main+0x144>
 800253a:	e7fe      	b.n	800253a <main+0x142>
  sConfig.Channel = ADC_CHANNEL_0;
 800253c:	9009      	str	r0, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800253e:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002540:	a909      	add	r1, sp, #36	; 0x24
 8002542:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 8002544:	950a      	str	r5, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002546:	f7fe f97b 	bl	8000840 <HAL_ADC_ConfigChannel>
 800254a:	4605      	mov	r5, r0
 800254c:	b100      	cbz	r0, 8002550 <main+0x158>
 800254e:	e7fe      	b.n	800254e <main+0x156>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002550:	221c      	movs	r2, #28
 8002552:	4601      	mov	r1, r0
 8002554:	a809      	add	r0, sp, #36	; 0x24
 8002556:	f000 f9a7 	bl	80028a8 <memset>
  htim11.Instance = TIM11;
 800255a:	4c2a      	ldr	r4, [pc, #168]	; (8002604 <main+0x20c>)
  htim11.Init.Prescaler = 84;
 800255c:	4a2a      	ldr	r2, [pc, #168]	; (8002608 <main+0x210>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255e:	60a5      	str	r5, [r4, #8]
  htim11.Init.Prescaler = 84;
 8002560:	2354      	movs	r3, #84	; 0x54
 8002562:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002566:	4620      	mov	r0, r4
  htim11.Init.Period = 500;
 8002568:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800256c:	60e3      	str	r3, [r4, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256e:	6125      	str	r5, [r4, #16]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002570:	f7fe fe66 	bl	8001240 <HAL_TIM_Base_Init>
 8002574:	b100      	cbz	r0, 8002578 <main+0x180>
 8002576:	e7fe      	b.n	8002576 <main+0x17e>
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002578:	4620      	mov	r0, r4
 800257a:	f7fe fe7b 	bl	8001274 <HAL_TIM_PWM_Init>
 800257e:	4602      	mov	r2, r0
 8002580:	b100      	cbz	r0, 8002584 <main+0x18c>
 8002582:	e7fe      	b.n	8002582 <main+0x18a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002584:	2360      	movs	r3, #96	; 0x60
 8002586:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002588:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 100;
 800258a:	2364      	movs	r3, #100	; 0x64
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800258c:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800258e:	a909      	add	r1, sp, #36	; 0x24
 8002590:	4620      	mov	r0, r4
  sConfigOC.Pulse = 100;
 8002592:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002594:	f7fe feb4 	bl	8001300 <HAL_TIM_PWM_ConfigChannel>
 8002598:	4606      	mov	r6, r0
 800259a:	b100      	cbz	r0, 800259e <main+0x1a6>
 800259c:	e7fe      	b.n	800259c <main+0x1a4>
  HAL_TIM_MspPostInit(&htim11);
 800259e:	4620      	mov	r0, r4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80025a0:	4c1a      	ldr	r4, [pc, #104]	; (800260c <main+0x214>)
  HAL_TIM_MspPostInit(&htim11);
 80025a2:	f000 f8a5 	bl	80026f0 <HAL_TIM_MspPostInit>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80025a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a8:	ad04      	add	r5, sp, #16
 80025aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ac:	f854 3b04 	ldr.w	r3, [r4], #4
 80025b0:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80025b2:	4631      	mov	r1, r6
 80025b4:	a804      	add	r0, sp, #16
 80025b6:	f7ff f874 	bl	80016a2 <osThreadCreate>
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <main+0x218>)
 80025bc:	6018      	str	r0, [r3, #0]
  osThreadDef(voltagePID, StartTask02, osPriorityIdle, 0, 128);
 80025be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c0:	ad09      	add	r5, sp, #36	; 0x24
 80025c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	602b      	str	r3, [r5, #0]
  voltagePIDHandle = osThreadCreate(osThread(voltagePID), NULL);
 80025c8:	4631      	mov	r1, r6
 80025ca:	a809      	add	r0, sp, #36	; 0x24
 80025cc:	f7ff f869 	bl	80016a2 <osThreadCreate>
 80025d0:	4b10      	ldr	r3, [pc, #64]	; (8002614 <main+0x21c>)
 80025d2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80025d4:	f7ff f860 	bl	8001698 <osKernelStart>
 80025d8:	e7fe      	b.n	80025d8 <main+0x1e0>
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40020000 	.word	0x40020000
 80025e4:	40020800 	.word	0x40020800
 80025e8:	40020400 	.word	0x40020400
 80025ec:	10210000 	.word	0x10210000
 80025f0:	20003e04 	.word	0x20003e04
 80025f4:	40004400 	.word	0x40004400
 80025f8:	20003d80 	.word	0x20003d80
 80025fc:	40012000 	.word	0x40012000
 8002600:	0f000001 	.word	0x0f000001
 8002604:	20003dc8 	.word	0x20003dc8
 8002608:	40014800 	.word	0x40014800
 800260c:	080028d0 	.word	0x080028d0
 8002610:	20003d7c 	.word	0x20003d7c
 8002614:	20003e54 	.word	0x20003e54

08002618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002618:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <HAL_MspInit+0x40>)
 800261c:	2200      	movs	r2, #0
 800261e:	9200      	str	r2, [sp, #0]
 8002620:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002622:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002626:	6459      	str	r1, [r3, #68]	; 0x44
 8002628:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800262a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800262e:	9100      	str	r1, [sp, #0]
 8002630:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	9201      	str	r2, [sp, #4]
 8002634:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002636:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800263a:	6419      	str	r1, [r3, #64]	; 0x40
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002644:	210f      	movs	r1, #15
 8002646:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800264a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800264c:	f7fe f9a0 	bl	8000990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002650:	b003      	add	sp, #12
 8002652:	f85d fb04 	ldr.w	pc, [sp], #4
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800

0800265c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800265c:	b510      	push	{r4, lr}
 800265e:	4604      	mov	r4, r0
 8002660:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002662:	2214      	movs	r2, #20
 8002664:	2100      	movs	r1, #0
 8002666:	a803      	add	r0, sp, #12
 8002668:	f000 f91e 	bl	80028a8 <memset>
  if(hadc->Instance==ADC1)
 800266c:	6822      	ldr	r2, [r4, #0]
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_ADC_MspInit+0x5c>)
 8002670:	429a      	cmp	r2, r3
 8002672:	d11e      	bne.n	80026b2 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002674:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002678:	2100      	movs	r1, #0
 800267a:	9101      	str	r1, [sp, #4]
 800267c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	480f      	ldr	r0, [pc, #60]	; (80026bc <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002684:	645a      	str	r2, [r3, #68]	; 0x44
 8002686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002688:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800268c:	9201      	str	r2, [sp, #4]
 800268e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	9102      	str	r1, [sp, #8]
 8002692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	9302      	str	r3, [sp, #8]
 80026a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026a4:	2301      	movs	r3, #1
 80026a6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026aa:	2303      	movs	r3, #3
 80026ac:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	f7fe f9b9 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026b2:	b008      	add	sp, #32
 80026b4:	bd10      	pop	{r4, pc}
 80026b6:	bf00      	nop
 80026b8:	40012000 	.word	0x40012000
 80026bc:	40020000 	.word	0x40020000

080026c0 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM11)
 80026c0:	6802      	ldr	r2, [r0, #0]
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_TIM_Base_MspInit+0x28>)
 80026c4:	429a      	cmp	r2, r3
{
 80026c6:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM11)
 80026c8:	d10b      	bne.n	80026e2 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_TIM_Base_MspInit+0x2c>)
 80026d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80026e2:	b002      	add	sp, #8
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40014800 	.word	0x40014800
 80026ec:	40023800 	.word	0x40023800

080026f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026f0:	b510      	push	{r4, lr}
 80026f2:	4604      	mov	r4, r0
 80026f4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f6:	2214      	movs	r2, #20
 80026f8:	2100      	movs	r1, #0
 80026fa:	a801      	add	r0, sp, #4
 80026fc:	f000 f8d4 	bl	80028a8 <memset>
  if(htim->Instance==TIM11)
 8002700:	6822      	ldr	r2, [r4, #0]
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_TIM_MspPostInit+0x4c>)
 8002704:	429a      	cmp	r2, r3
 8002706:	d116      	bne.n	8002736 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002708:	2300      	movs	r3, #0
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_TIM_MspPostInit+0x50>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002712:	f042 0202 	orr.w	r2, r2, #2
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002726:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800272e:	2303      	movs	r3, #3
 8002730:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002732:	f7fe f977 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002736:	b006      	add	sp, #24
 8002738:	bd10      	pop	{r4, pc}
 800273a:	bf00      	nop
 800273c:	40014800 	.word	0x40014800
 8002740:	40023800 	.word	0x40023800
 8002744:	40020400 	.word	0x40020400

08002748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002748:	b510      	push	{r4, lr}
 800274a:	4604      	mov	r4, r0
 800274c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274e:	2214      	movs	r2, #20
 8002750:	2100      	movs	r1, #0
 8002752:	a803      	add	r0, sp, #12
 8002754:	f000 f8a8 	bl	80028a8 <memset>
  if(huart->Instance==USART2)
 8002758:	6822      	ldr	r2, [r4, #0]
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_UART_MspInit+0x60>)
 800275c:	429a      	cmp	r2, r3
 800275e:	d120      	bne.n	80027a2 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002760:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002764:	2100      	movs	r1, #0
 8002766:	9101      	str	r1, [sp, #4]
 8002768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276a:	4810      	ldr	r0, [pc, #64]	; (80027ac <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800276c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
 8002772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002774:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002778:	9201      	str	r2, [sp, #4]
 800277a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277c:	9102      	str	r1, [sp, #8]
 800277e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002790:	230c      	movs	r3, #12
 8002792:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002798:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800279a:	2307      	movs	r3, #7
 800279c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f7fe f941 	bl	8000a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027a2:	b008      	add	sp, #32
 80027a4:	bd10      	pop	{r4, pc}
 80027a6:	bf00      	nop
 80027a8:	40004400 	.word	0x40004400
 80027ac:	40020000 	.word	0x40020000

080027b0 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b2:	f7fd fedb 	bl	800056c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 80027ba:	f7fe bf92 	b.w	80016e2 <osSystickHandler>
	...

080027c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027c0:	490f      	ldr	r1, [pc, #60]	; (8002800 <SystemInit+0x40>)
 80027c2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80027c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <SystemInit+0x44>)
 80027d0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027d2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80027d4:	f042 0201 	orr.w	r2, r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80027da:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80027e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027e6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80027e8:	4a07      	ldr	r2, [pc, #28]	; (8002808 <SystemInit+0x48>)
 80027ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027f2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80027f4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80027fa:	608b      	str	r3, [r1, #8]
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00
 8002804:	40023800 	.word	0x40023800
 8002808:	24003010 	.word	0x24003010

0800280c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800280c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002844 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002810:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002812:	e003      	b.n	800281c <LoopCopyDataInit>

08002814 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002816:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002818:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800281a:	3104      	adds	r1, #4

0800281c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800281c:	480b      	ldr	r0, [pc, #44]	; (800284c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002820:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002822:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002824:	d3f6      	bcc.n	8002814 <CopyDataInit>
  ldr  r2, =_sbss
 8002826:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002828:	e002      	b.n	8002830 <LoopFillZerobss>

0800282a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800282a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800282c:	f842 3b04 	str.w	r3, [r2], #4

08002830 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002830:	4b09      	ldr	r3, [pc, #36]	; (8002858 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002832:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002834:	d3f9      	bcc.n	800282a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002836:	f7ff ffc3 	bl	80027c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800283a:	f000 f811 	bl	8002860 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800283e:	f7ff fddb 	bl	80023f8 <main>
  bx  lr    
 8002842:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002844:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002848:	0800293c 	.word	0x0800293c
  ldr  r0, =_sdata
 800284c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002850:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002854:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002858:	20003e58 	.word	0x20003e58

0800285c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800285c:	e7fe      	b.n	800285c <ADC_IRQHandler>
	...

08002860 <__libc_init_array>:
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	4e0d      	ldr	r6, [pc, #52]	; (8002898 <__libc_init_array+0x38>)
 8002864:	4c0d      	ldr	r4, [pc, #52]	; (800289c <__libc_init_array+0x3c>)
 8002866:	1ba4      	subs	r4, r4, r6
 8002868:	10a4      	asrs	r4, r4, #2
 800286a:	2500      	movs	r5, #0
 800286c:	42a5      	cmp	r5, r4
 800286e:	d109      	bne.n	8002884 <__libc_init_array+0x24>
 8002870:	4e0b      	ldr	r6, [pc, #44]	; (80028a0 <__libc_init_array+0x40>)
 8002872:	4c0c      	ldr	r4, [pc, #48]	; (80028a4 <__libc_init_array+0x44>)
 8002874:	f000 f820 	bl	80028b8 <_init>
 8002878:	1ba4      	subs	r4, r4, r6
 800287a:	10a4      	asrs	r4, r4, #2
 800287c:	2500      	movs	r5, #0
 800287e:	42a5      	cmp	r5, r4
 8002880:	d105      	bne.n	800288e <__libc_init_array+0x2e>
 8002882:	bd70      	pop	{r4, r5, r6, pc}
 8002884:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002888:	4798      	blx	r3
 800288a:	3501      	adds	r5, #1
 800288c:	e7ee      	b.n	800286c <__libc_init_array+0xc>
 800288e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002892:	4798      	blx	r3
 8002894:	3501      	adds	r5, #1
 8002896:	e7f2      	b.n	800287e <__libc_init_array+0x1e>
 8002898:	08002934 	.word	0x08002934
 800289c:	08002934 	.word	0x08002934
 80028a0:	08002934 	.word	0x08002934
 80028a4:	08002938 	.word	0x08002938

080028a8 <memset>:
 80028a8:	4402      	add	r2, r0
 80028aa:	4603      	mov	r3, r0
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d100      	bne.n	80028b2 <memset+0xa>
 80028b0:	4770      	bx	lr
 80028b2:	f803 1b01 	strb.w	r1, [r3], #1
 80028b6:	e7f9      	b.n	80028ac <memset+0x4>

080028b8 <_init>:
 80028b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ba:	bf00      	nop
 80028bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028be:	bc08      	pop	{r3}
 80028c0:	469e      	mov	lr, r3
 80028c2:	4770      	bx	lr

080028c4 <_fini>:
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	bf00      	nop
 80028c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ca:	bc08      	pop	{r3}
 80028cc:	469e      	mov	lr, r3
 80028ce:	4770      	bx	lr
